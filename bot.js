const { VK, Upload, MessageSource, Keyboard, Context } = require("vk-io");
const { HearManager } = require("@vk-io/hear");
const { KeyboardBuilder } = require("vk-io");
const fs = require("fs");
const { PhotoAttachment } = require("vk-io");

const Vk = new VK({
  token:
    "vk1.a.RvdemXZOVaaJaggnlmrUSD2pwfLGv_gkVy9tuOK_cMyl4CtxtYctnbZt3bLkt8DYh2g4CVSWa-qmzFiCGCYWJi5XbTSVgA_J08ffEOv2uEUsCHNyxEZPjSJ16iTxT9ssj0K9RHVp3JBmeymYp1PlPiUbaEbUXuZI9dxHMRUotdInnSNG7URLNP9Ce3xD9Fgh7zx3FNg05P1YHr6pXz0c8Q",
});
const vk = new VK({
  token:
    "vk1.a.tMECBZi_u5Ga1HziTLtfKw_CORaMDnEeiERF42wM2vHCac9uSScuNoTKvC-jtpzygdNeZWsz7YRhnhDAaLuOkoFLce-LY2GGLFy5spPEF2OEKCZuy_AfZZJI97bcLwLD237gg7g7Yq804nAX2ok5EYCroeoM54MWbeaEhhpwC734M47hplZwu7qeM2rVv7p3mr3Fi-T3PoCzDfZcrifeIA",
});
// vk1.a.RvdemXZOVaaJaggnlmrUSD2pwfLGv_gkVy9tuOK_cMyl4CtxtYctnbZt3bLkt8DYh2g4CVSWa-qmzFiCGCYWJi5XbTSVgA_J08ffEOv2uEUsCHNyxEZPjSJ16iTxT9ssj0K9RHVp3JBmeymYp1PlPiUbaEbUXuZI9dxHMRUotdInnSNG7URLNP9Ce3xD9Fgh7zx3FNg05P1YHr6pXz0c8Q
vk.updates
  .startWebhook({
    path: "/webhook", // URL-–∞–¥—Ä–µ—Å, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –∑–∞–ø—Ä–æ—Å
    port: 3000, // –ø–æ—Ä—Ç, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω —Å–µ—Ä–≤–µ—Ä
  })
  .then(() => {
    console.log("Webhook –∑–∞–ø—É—â–µ–Ω");
  })
  .catch((error) => {
    console.error(error);
  });
vk.api.messages.getConversations({}).then(console.log).catch(console.error);

const mongoose = require("mongoose");
// import mongoose from "mongoose";
const db =
  "mongodb+srv://OlegSazanov:InDigga222@vkbot-bmw-game.6nywbop.mongodb.net/VK-Bot";

const Car = require("./MyCar.js");
const RandomCar = require("./RandomCar.js");
const Time = require("./TimeVK.js");
const Info = require("./Info.js");
const RaceCount = require("./RaceCount.js");
const LastPhoto = require("./SendingPhoto.js");
const NecroDaily = require("./NecroDaily.js");
const { info } = require("console");

const bot = new HearManager();
vk.updates.on("message_new", bot.middleware);

(async function initialize() {
  await vk.updates.startPolling();
  console.log(`Polling started at ${new Date()}`);

  const database = await mongoose.connect(db, {
    connectTimeoutMS: 15000,
  });

  if (!database) {
    console.log("Error");
  }
  console.log("Connected to db");
})();
let ReadyToWork;
let ReadyToFeed;
let FestInfo;
let photoUrl;

let keyboard;
bot.hear(/^–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É$/i, async (msg) => {
  const chatId = msg.peerId;
  const userId = msg.senderId;
  msg.send("–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É");
  const photoUrls = [
    "photo-218124566_457239022",
    "photo-218124566_457239023",
    "photo-218124566_457239024",
    "photo-218124566_457239025",
    "photo-218124566_457239026",
    "photo-218124566_457239027",
    "photo-218124566_457239028",
    "photo-218124566_457239039",
    "photo-218124566_457239043",
    "photo-218124566_457239044",
  ];
  let pictureFound = false;
  let photoUrl;

  const IfExist = await LastPhoto.findOne({ ChatId: chatId });
  if (!IfExist) {
    const PhotoDB = await LastPhoto.create({
      ChatId: chatId,
      // RecentPhoto: photoUrl,
      SendingStatus: true,
    });
  } else {
    const PhotoDB = await LastPhoto.findOneAndUpdate(
      {
        ChatId: chatId,
      },
      {
        // RecentPhoto: photoUrl,
        SendingStatus: true,
      }
    );
  }

  async function GetRandomPicture() {
    let pictureFound = false;
    let photoUrl = "";
    const PhotoDB = await LastPhoto.findOne({ ChatId: chatId });

    while (!pictureFound && PhotoDB.SendingStatus) {
      const randomNum = Math.floor(Math.random() * photoUrls.length);
      photoUrl = photoUrls[randomNum];

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–æ—Ç–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      const pictureExists = await Car.findOne({
        ChatId: chatId,
        CarPicture: photoUrl,
      });

      if (!pictureExists) {
        pictureFound = true;

        console.log(photoUrl);

        const PhotoDB = await LastPhoto.findOneAndUpdate(
          {
            ChatId: chatId,
          },
          {
            RecentPhoto: photoUrl,
            SendingStatus: true,
          }
        );
        msg.send({
          message: `–¢–æ–ª—å–∫–æ —á—Ç–æ –ø–æ—è–≤–∏–ª—Å—è –≤–æ—Ç —Ç–∞–∫–æ–π –≤–∞—Ä–∏–∞–Ω—Ç–∏–∫. –ù—É —á—Ç–æ, –±—Ä–∞—Ç—å –±—É–¥–µ—à—å?`,
          attachment: photoUrl,
        });
        // const IfExist = await LastPhoto.findOne({ ChatId: chatId });
        // if (!IfExist) {
        //   const PhotoDB = await LastPhoto.create({
        //     ChatId: chatId,
        //     RecentPhoto: photoUrl,
        //     SendingStatus: true,
        //   });
        // } else {
        // }
      }
    }
  }
  const timerId = setInterval(GetRandomPicture, 360000);

  // bot.hear(/^–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É$/i, async (msg) => {
  //   // clearInterval(timerId);
  //   const PhotoDB = await LastPhoto.findOneAndUpdate({
  //     ChatId: chatId,
  //     RecentPhoto: "–ß–∞—Ç –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É",
  //     SendingStatus: false,
  //   });
  //   msg.send("–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏");
  // });

  bot.hear(/–í–∑—è—Ç—å –Ω–µ–∫—Ä—É—Ö—É$/i, async (msg) => {
    const chatId = msg.peerId;
    const userId = msg.senderId;
    if (msg.isOutbox) return;
    const CarExist = await Car.findOne({ ChatId: chatId, UserId: userId });
    if (CarExist) {
      msg.send("–£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –Ω–µ–∫—Ä—É—Ö–∞!");
      return;
    }
    const PhotoFromDB = await LastPhoto.findOne({ ChatId: chatId });
    const photoUrl = PhotoFromDB.RecentPhoto;

    const result = await Car.findOne({
      ChatId: chatId,
      CarPicture: photoUrl,
    });

    console.log(PhotoFromDB.SendingStatus);

    if (result) {
      msg.send("–≠—Ç—É –Ω–µ–∫—Ä—É—Ö—É —É–∂–µ –∫—Ç–æ —Ç–æ –∑–∞–±—Ä–∞–ª!");
      return;
    } else if (PhotoFromDB.SendingStatus === true) {
      const FreePhoto = PhotoFromDB.RecentPhoto;

      // const chatId = msg.peerId;
      // const userId = msg.senderId;
      console.log(chatId);
      const RepairStart = 75;
      const StartZero = 0;

      const idCar = await Car.create({
        UserId: userId,
        ChatId: chatId,
        Name: "–í–∞—à–∞ –Ω–µ–∫—Ä—É—Ö–∞",
        Level: StartZero,
        Exp: StartZero,
        ConditionNumber: StartZero,
        Condition: "–ù—É–∂–µ–Ω —Ä–µ–º–æ–Ω—Ç",
        Health: "–ù—É–∂–Ω–∞ –ø–æ–∫—Ä–∞—Å–∫–∞",
        Money: StartZero,
        Class: "–†–∞–π–æ–Ω–Ω–∞—è",
        Fuel: StartZero,
        CarPicture: FreePhoto,
        DateOfCreation: new Date(),
      });
      const TimeThen = await Time.create({
        ChatId: chatId,
        UserId: userId,
        Time: new Date(),
        OnWork: false,
        Time2: new Date(),
        OnWork2: false,
        StatusArc: false,
        FestTime: new Date(),
      });
      const ActionInfo = await Info.create({
        ChatId: chatId,
        UserId: userId,
        TimeToWork: new Date(),
        OnWork: StartZero,
        WorkVar: StartZero,
        TimeToFeed: new Date(),
        TimeToRace: new Date(),
        TimeToUnderground: new Date(),
        AutoServiceTime: new Date(),
        AutoServiceStatus: false,
        StatusParty: false,
        StatusRace: false,
        //
        ZapParts: StartZero,
        PaintBallon: StartZero,
        RepairPrice: RepairStart,
        Tape: StartZero,
        WD: StartZero,
        Engine: "–º10",
        Suspension: "–£–±–∏—Ç–∞—è",
        Bumpers: "–°—Ç–∞–Ω–¥–∞—Ä—Ç",
        Conditioner: "–ù–µ—Ç",
        Saloon: "–¢–∫–∞–Ω—å",
        Headlights: "–ú—É—Ç–Ω—ã–µ",
        Taillights: "–° —Ç—Ä–µ—â–∏–Ω–∞–º–∏",
        SteeringWheel: "–ó–∞—Ç–µ—Ä—Ç—ã–π",
        StinkyTree: "–ù–µ—Ç",
        Kanistra: "–ù–µ—Ç",
        Keys: "–ù–µ—Ç",
        FirstAid: "–ù–µ—Ç",
      });

      keyboard = new KeyboardBuilder()
        .row()
        .inline()
        .textButton({
          label: "–ì–∞—Ä–∞–∂",
          payload: {
            command: "–ì–∞—Ä–∞–∂",
          },
          color: Keyboard.POSITIVE_COLOR,
        })
        .inline()
        .textButton({
          label: "–ò–Ω—Ñ–æ",
          payload: {
            command: "–ò–Ω—Ñ–æ",
          },
          color: Keyboard.NEGATIVE_COLOR,
        })
        .row()
        .inline()
        .textButton({
          label: "–ö–ª—É–±",
          payload: {
            command: "–ö–ª—É–±",
          },
          color: Keyboard.SECONDARY_COLOR,
        })
        .inline()
        .textButton({
          label: "–ú—É–∑–µ–π",
          payload: {
            command: "–ú—É–∑–µ–π",
          },
          color: Keyboard.SECONDARY_COLOR,
        })
        .oneTime();

      const nextLevelExperience = (idCar.Level + 5) * 2;
      let attachment = idCar.CarPicture;
      msg.send({
        message: `‚úè–ò–º—è: ${idCar.Name}\nüèÜ–£—Ä–æ–≤–µ–Ω—å: ${idCar.Level}\nüèÅ–û–ø—ã—Ç: ${idCar.Exp}/${nextLevelExperience}\nüõ†–°–æ—Å—Ç–æ—è–Ω–∏–µ: ${idCar.Condition}(${idCar.ConditionNumber})\nüöò–ü–æ—Ä–æ–≥–∏: ${idCar.Health}\nüí∞–°—á–µ—Ç: ${idCar.Money}üíµ\nüõ¢–¢–æ–ø–ª–∏–≤–æ: ${idCar.Fuel}‚õΩ`,
        keyboard: keyboard,
        attachment: attachment,
      });
    } else {
      msg.send("–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É");
    }
  });
});

bot.hear(/^–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏$/i, async (msg) => {
  // clearInterval(timerId);

  const chatId = msg.peerId;

  msg.send("–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏");
  const PhotoDB = await LastPhoto.findOneAndUpdate(
    {
      ChatId: chatId,
    },
    {
      // RecentPhoto: "–ß–∞—Ç –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É",
      SendingStatus: false,
    }
  );
});

bot.hear(/^11$/i, (msg) => {
  if (msg.isOutbox) return;

  console.log(msg);
  msg.send(msg.senderId);
});

bot.hear(/^–î–∞—Ç—å –Ω–µ–∫—Ä—É—Ö–µ –∏–º—è*/i, async (msg) => {
  if (msg.isOutbox) return;
  const userId = msg.senderId;
  const chatId = msg.peerId;
  const newName = msg.text
    .replace("–î–∞—Ç—å –Ω–µ–∫—Ä—É—Ö–µ –∏–º—è", "")
    .replace("–¥–∞—Ç—å –Ω–µ–∫—Ä—É—Ö–µ –∏–º—è", "")
    .trim();

  const name = await Car.updateOne(
    {
      UserId: userId,
      ChatId: chatId,
    },
    { Name: newName },
    { upsert: false, new: true }
  );
  if (!name) {
    bot.sendMessage(chatId, "–£ –í–∞—Å –Ω–µ—Ç –Ω–µ–∫—Ä—É—Ö–∏");
    return;
  }
  const arr = [
    { a: "–û—Ç–ª–∏—á–Ω–æ–µ –∏–º—è!" },
    { b: "–ù—É, –º–æ–∂–Ω–æ –±—ã–ª–æ –ø—Ä–∏–¥—É–º–∞—Ç—å –∏–º—è –∏ –ø–æ-–ª—É—á—à–µ!" },
  ];
  const randomIndex = Math.floor(Math.random() * arr.length);
  const randomReaction = arr[randomIndex];

  msg.send(`${newName}? \n${Object.values(randomReaction)}`);
});

bot.hear(/–ú–æ—è –Ω–µ–∫—Ä—É—Ö–∞$/i, async (msg) => {
  const userId = msg.senderId;
  const chatId = msg.peerId;
  if (msg.isOutbox) return;

  const idCar = await Car.findOne({ ChatId: chatId, UserId: userId });
  if (!idCar) {
    msg.send("–£ –í–∞—Å –Ω–µ—Ç –Ω–µ–∫—Ä—É—Ö–∏! :(");
    return;
  }
  // let keyboard;
  keyboard = new KeyboardBuilder()
    .row()
    .inline()
    .textButton({
      label: "–ì–∞—Ä–∞–∂",
      payload: {
        command: "–ì–∞—Ä–∞–∂",
      },
      color: Keyboard.POSITIVE_COLOR,
    })
    .inline()
    .textButton({
      label: "–ò–Ω—Ñ–æ",
      payload: {
        command: "–ò–Ω—Ñ–æ",
      },
      color: Keyboard.NEGATIVE_COLOR,
    })
    .row()
    .inline()
    .textButton({
      label: "–ö–ª—É–±",
      payload: {
        command: "–ö–ª—É–±",
      },
      color: Keyboard.SECONDARY_COLOR,
    })
    .inline()
    .textButton({
      label: "–ú—É–∑–µ–π",
      payload: {
        command: "–ú—É–∑–µ–π",
      },
      color: Keyboard.SECONDARY_COLOR,
    })
    .oneTime();

  const photoUrl = idCar.CarPicture;

  const nextLevelExperience = (idCar.Level + 5) * 2;
  let attachment = idCar.CarPicture;

  if (idCar.Condition === "–ù—É–∂–µ–Ω —Ä–µ–º–æ–Ω—Ç") {
    msg.send({
      message: `‚úè–ò–º—è: ${idCar.Name}\nüèÜ–£—Ä–æ–≤–µ–Ω—å: ${idCar.Level}\nüèÅ–û–ø—ã—Ç: ${idCar.Exp}/${nextLevelExperience}\nüõ†–°–æ—Å—Ç–æ—è–Ω–∏–µ: ${idCar.Condition}\nüöò–ü–æ—Ä–æ–≥–∏: ${idCar.Health}\nüí∞–°—á–µ—Ç: ${idCar.Money}üíµ\nüõ¢–¢–æ–ø–ª–∏–≤–æ: ${idCar.Fuel}‚õΩ`,
      keyboard: keyboard,
      attachment: photoUrl,
    });
  } else {
    msg.send({
      message: `‚úè–ò–º—è: ${idCar.Name}\nüèÜ–£—Ä–æ–≤–µ–Ω—å: ${idCar.Level}\nüèÅ–û–ø—ã—Ç: ${idCar.Exp}/${nextLevelExperience}\nüõ†–°–æ—Å—Ç–æ—è–Ω–∏–µ: ${idCar.Condition}(${idCar.ConditionNumber})\nüöò–ü–æ—Ä–æ–≥–∏: ${idCar.Health}\nüí∞–°—á–µ—Ç: ${idCar.Money}üíµ\nüõ¢–¢–æ–ø–ª–∏–≤–æ: ${idCar.Fuel}‚õΩ`,
      keyboard: keyboard,
      attachment: photoUrl,
    });
  }
});

bot.hear(/^–°–¥–∞—Ç—å –Ω–µ–∫—Ä—É—Ö—É$/i, async (msg) => {
  const userId = msg.senderId;
  const chatId = msg.peerId;
  const CarDelete = await Car.findOne({ ChatId: chatId, UserId: userId });
  // let options;
  if (!CarDelete) {
    msg.send("–£ –í–∞—Å –Ω–µ—Ç –Ω–µ–∫—Ä—É—Ö–∏ :(");
    return;
  } else {
    // place for keyboard for question message - –ø–æ–∫–∞ –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    const photo = "photo-218124566_457239035";
    const DeleteCar = await Car.deleteOne({
      UserId: userId,
      ChatId: chatId,
    });
    const DeleteTime = await Time.deleteOne({
      UserId: userId,
      ChatId: chatId,
    });
    const DeleteInfo = await Info.deleteOne({
      UserId: userId,
      ChatId: chatId,
    });
    msg.send({
      message: "–í—ã —Å–¥–∞–ª–∏ —Å–≤–æ—é –Ω–µ–∫—Ä—É—Ö—É –≤ —Ä–∞–∑–±–æ—Ä! :(",
      attachment: photo,
    });
    console.log("Car deleted");
  }
});

bot.hear(/–ò–Ω—Ñ–æ$/i, async (msg) => {
  const userId = msg.senderId;
  const chatId = msg.peerId;

  const TimeNow = new Date();

  const infoId = await Info.findOne({ ChatId: chatId, UserId: userId });
  if (infoId.TimeToWork.getTime() < TimeNow.getTime() && infoId.OnWork === 0) {
    ReadyToWork = "–ú–æ–∂–Ω–æ –Ω–∞ —Ä–∞–±–æ—Ç—É";

    keyboard = new KeyboardBuilder()
      .row()

      .textButton({
        label: "–û—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è –Ω–∞ —Ä–∞–±–æ—Ç—É",
        payload: { command: "–û—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è –Ω–∞ —Ä–∞–±–æ—Ç—É" },
        color: Keyboard.POSITIVE_COLOR,
      })
      .row()
      .textButton({
        label: "–ó–∞–ø—Ä–∞–≤–∏—Ç—å –Ω–µ–∫—Ä—É—Ö—É",
        payload: { command: "–ó–∞–ø—Ä–∞–≤–∏—Ç—å –Ω–µ–∫—Ä—É—Ö—É" },
        color: Keyboard.POSITIVE_COLOR,
      })
      .row()
      .inline()
      .textButton({
        label: "–ì–æ–Ω–∫–∞",
        payload: { command: "–ì–æ–Ω–∫–∞" },
        color: Keyboard.POSITIVE_COLOR,
      })

      .textButton({
        label: "–ë–ú–í —Ñ–µ—Å—Ç",
        payload: { command: "–ë–ú–í —Ñ–µ—Å—Ç" },
        color: Keyboard.NEGATIVE_COLOR,
      })
      .row()
      .textButton({
        label: "–ú–æ—è –Ω–µ–∫—Ä—É—Ö–∞",
        payload: { command: "–ú–æ—è –Ω–µ–∫—Ä—É—Ö–∞" },
        color: Keyboard.SECONDARY_COLOR,
      })

      .oneTime();
  } else if (
    infoId.TimeToWork.getTime() < TimeNow.getTime() &&
    infoId.OnWork > 0
  ) {
    ReadyToWork = "–ú–æ–∂–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É";

    keyboard = new KeyboardBuilder()
      .row()
      .textButton({
        label: "–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É",
        payload: { command: "–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É" },
        color: Keyboard.POSITIVE_COLOR,
      })
      .row()
      .textButton({
        label: "–ó–∞–ø—Ä–∞–≤–∏—Ç—å –Ω–µ–∫—Ä—É—Ö—É",
        payload: { command: "–ó–∞–ø—Ä–∞–≤–∏—Ç—å –Ω–µ–∫—Ä—É—Ö—É" },
        color: Keyboard.POSITIVE_COLOR,
      })
      .row()
      .inline()
      .textButton({
        label: "–ì–æ–Ω–∫–∞",
        payload: { command: "–ì–æ–Ω–∫–∞" },
        color: Keyboard.POSITIVE_COLOR,
      })

      .textButton({
        label: "–ë–ú–í —Ñ–µ—Å—Ç",
        payload: { command: "–ë–ú–í —Ñ–µ—Å—Ç" },
        color: Keyboard.NEGATIVE_COLOR,
      })
      .row()
      .textButton({
        label: "–ú–æ—è –Ω–µ–∫—Ä—É—Ö–∞",
        payload: { command: "–ú–æ—è –Ω–µ–∫—Ä—É—Ö–∞" },
        color: Keyboard.SECONDARY_COLOR,
      })

      .oneTime();
  } else if (
    infoId.TimeToWork.getTime() > TimeNow.getTime() &&
    infoId.OnWork > 0
  ) {
    const TimeAnswer = infoId.TimeToWork.getTime() - TimeNow.getTime(); //—Ä–∞–∑–Ω–∏—Ü–∞
    const dateInHours = Math.floor(TimeAnswer / 1000 / 60 / 60);
    console.log("dateInHours:", dateInHours);
    const dateInMinutes = Math.floor(TimeAnswer / 1000 / 60) - dateInHours * 60;
    console.log("dateInMinutes:", dateInMinutes);
    ReadyToWork = `–ú–æ–∂–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É —á–µ—Ä–µ–∑ ${dateInHours}—á:${dateInMinutes}–º`;

    keyboard = new KeyboardBuilder()

      .row()
      .textButton({
        label: "–ó–∞–ø—Ä–∞–≤–∏—Ç—å –Ω–µ–∫—Ä—É—Ö—É",
        payload: { command: "–ó–∞–ø—Ä–∞–≤–∏—Ç—å –Ω–µ–∫—Ä—É—Ö—É" },
        color: Keyboard.POSITIVE_COLOR,
      })
      .row()
      .inline()
      .textButton({
        label: "–ì–æ–Ω–∫–∞",
        payload: { command: "–ì–æ–Ω–∫–∞" },
        color: Keyboard.POSITIVE_COLOR,
      })

      .textButton({
        label: "–ë–ú–í —Ñ–µ—Å—Ç",
        payload: { command: "–ë–ú–í —Ñ–µ—Å—Ç" },
        color: Keyboard.NEGATIVE_COLOR,
      })
      .row()
      .textButton({
        label: "–ú–æ—è –Ω–µ–∫—Ä—É—Ö–∞",
        payload: { command: "–ú–æ—è –Ω–µ–∫—Ä—É—Ö–∞" },
        color: Keyboard.SECONDARY_COLOR,
      })

      .oneTime();

    console.log(Math.floor(TimeAnswer / 1000));
    console.log(`${dateInHours}:${dateInMinutes}`);
  }
  if (infoId.TimeToFeed.getTime() < TimeNow.getTime()) {
    ReadyToFeed = "–ú–æ–∂–Ω–æ –∑–∞–ø—Ä–∞–≤–∏—Ç—å";
  } else {
    const TimeAnswer2 = infoId.TimeToFeed.getTime() - TimeNow.getTime(); //—Ä–∞–∑–Ω–∏—Ü–∞
    const dateInHours = Math.floor(TimeAnswer2 / 1000 / 60 / 60);
    console.log("dateInHours:", dateInHours);
    const dateInMinutes =
      Math.floor(TimeAnswer2 / 1000 / 60) - dateInHours * 60;
    console.log("dateInMinutes:", dateInMinutes);
    ReadyToFeed = `–ú–æ–∂–Ω–æ –∑–∞–ø—Ä–∞–≤–∏—Ç—å —á–µ—Ä–µ–∑ ${dateInHours}—á:${dateInMinutes}–º`;
    //
    //
    //

    // const infoId = await Info.findOne({ ChatId: chatId, UserId: userId });
    if (
      infoId.TimeToWork.getTime() < TimeNow.getTime() &&
      infoId.OnWork === 0
    ) {
      ReadyToWork = "–ú–æ–∂–Ω–æ –Ω–∞ —Ä–∞–±–æ—Ç—É";

      keyboard = new KeyboardBuilder()
        .row()

        .textButton({
          label: "–û—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è –Ω–∞ —Ä–∞–±–æ—Ç—É",
          payload: { command: "–û—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è –Ω–∞ —Ä–∞–±–æ—Ç—É" },
          color: Keyboard.POSITIVE_COLOR,
        })

        .row()
        .inline()
        .textButton({
          label: "–ì–æ–Ω–∫–∞",
          payload: { command: "–ì–æ–Ω–∫–∞" },
          color: Keyboard.POSITIVE_COLOR,
        })

        .textButton({
          label: "–ë–ú–í —Ñ–µ—Å—Ç",
          payload: { command: "–ë–ú–í —Ñ–µ—Å—Ç" },
          color: Keyboard.NEGATIVE_COLOR,
        })
        .row()
        .textButton({
          label: "–ú–æ—è –Ω–µ–∫—Ä—É—Ö–∞",
          payload: { command: "–ú–æ—è –Ω–µ–∫—Ä—É—Ö–∞" },
          color: Keyboard.SECONDARY_COLOR,
        })

        .oneTime();
    } else if (
      infoId.TimeToWork.getTime() < TimeNow.getTime() &&
      infoId.OnWork > 0
    ) {
      ReadyToWork = "–ú–æ–∂–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É";

      keyboard = new KeyboardBuilder()
        .row()
        .textButton({
          label: "–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É",
          payload: { command: "–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É" },
          color: Keyboard.POSITIVE_COLOR,
        })

        .row()
        .inline()
        .textButton({
          label: "–ì–æ–Ω–∫–∞",
          payload: { command: "–ì–æ–Ω–∫–∞" },
          color: Keyboard.POSITIVE_COLOR,
        })

        .textButton({
          label: "–ë–ú–í —Ñ–µ—Å—Ç",
          payload: { command: "–ë–ú–í —Ñ–µ—Å—Ç" },
          color: Keyboard.NEGATIVE_COLOR,
        })
        .row()
        .textButton({
          label: "–ú–æ—è –Ω–µ–∫—Ä—É—Ö–∞",
          payload: { command: "–ú–æ—è –Ω–µ–∫—Ä—É—Ö–∞" },
          color: Keyboard.SECONDARY_COLOR,
        })

        .oneTime();
    } else if (
      infoId.TimeToWork.getTime() > TimeNow.getTime() &&
      infoId.OnWork > 0
    ) {
      const TimeAnswer = infoId.TimeToWork.getTime() - TimeNow.getTime(); //—Ä–∞–∑–Ω–∏—Ü–∞
      const dateInHours = Math.floor(TimeAnswer / 1000 / 60 / 60);
      console.log("dateInHours:", dateInHours);
      const dateInMinutes =
        Math.floor(TimeAnswer / 1000 / 60) - dateInHours * 60;
      console.log("dateInMinutes:", dateInMinutes);
      ReadyToWork = `–ú–æ–∂–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É —á–µ—Ä–µ–∑ ${dateInHours}—á:${dateInMinutes}–º`;

      keyboard = new KeyboardBuilder()

        .row()
        .inline()
        .textButton({
          label: "–ì–æ–Ω–∫–∞",
          payload: { command: "–ì–æ–Ω–∫–∞" },
          color: Keyboard.POSITIVE_COLOR,
        })

        .textButton({
          label: "–ë–ú–í —Ñ–µ—Å—Ç",
          payload: { command: "–ë–ú–í —Ñ–µ—Å—Ç" },
          color: Keyboard.NEGATIVE_COLOR,
        })
        .row()
        .textButton({
          label: "–ú–æ—è –Ω–µ–∫—Ä—É—Ö–∞",
          payload: { command: "–ú–æ—è –Ω–µ–∫—Ä—É—Ö–∞" },
          color: Keyboard.SECONDARY_COLOR,
        })

        .oneTime();

      console.log(Math.floor(TimeAnswer / 1000));
      console.log(`${dateInHours}:${dateInMinutes}`);
    }

    //
    //
    //

    console.log(Math.floor(TimeAnswer2 / 1000));
    console.log(`${dateInHours}:${dateInMinutes}`);
  }
  let Status;
  const RaceStatus = await Info.findOne({ ChatId: chatId, UserId: userId });
  if (RaceStatus.StatusRace == true) {
    Status = "–£—á–∞—Å—Ç–≤—É–µ—Ç –≤ –≥–æ–Ω–∫–µ!";
  } else {
    Status = "–ù–µ —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ –≥–æ–Ω–∫–µ";
  }

  const TimeLast = await Time.findOne({ ChatId: chatId, UserId: userId });
  // if (!TimeLast) {
  //   bot.sendMessage(chatId, "–£ –í–∞—Å –Ω–µ—Ç –Ω–µ–∫—Ä—É—Ö–∏");
  //   return;
  // }
  const TimeNoww = new Date() * 1;
  console.log("last: ", TimeLast.FestTime);
  console.log("now:", TimeNow);

  const Arc = await Car.findOne({ ChatId: chatId, UserId: userId });
  let ArcStat = Arc.Health;
  if (TimeLast.FestTime.getTime() < TimeNoww && ArcStat === "–ù—É–∂–Ω–∞ –ø–æ–∫—Ä–∞—Å–∫–∞") {
    FestInfo = "–ú–æ–∂–Ω–æ –Ω–∞ —Ñ–µ—Å—Ç!";
  }
  if (TimeLast.FestTime.getTime() < TimeNoww && ArcStat === "–ï—â–µ –ø–æ—Ö–æ–¥–∏—Ç") {
    FestInfo = "–í–∞—à–∞ –∞—Ä–∫–∞ –∫–∞–∫ –Ω–æ–≤–∞—è, –º–æ–∂–Ω–æ –Ω–∞ —Ñ–µ—Å—Ç!";
  }
  if (TimeLast.FestTime.getTime() > TimeNoww) {
    const TimeFest = TimeLast.FestTime.getTime() - TimeNoww;
    const dateInHours = Math.floor(TimeFest / 1000 / 60 / 60);
    console.log("dateInHours:", dateInHours);
    const dateInMinutes = Math.floor(TimeFest / 1000 / 60) - dateInHours * 60;
    console.log("dateInMinutes:", dateInMinutes);

    FestInfo = `–ù–∞ —Ñ–µ—Å—Ç –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ ${dateInHours}—á:${dateInMinutes}–º`;

    // Keyboard.inline_keyboard[2].pop();
  }

  const idCar = await Car.findOne({ ChatId: chatId, UserId: userId });

  // const photoUrl = idCar.CarPicture;

  const nextLevelExperience = (idCar.Level + 5) * 2;
  let attachment = idCar.CarPicture;
  msg.send({
    message: `${idCar.Name}\n \nüí∞: ${ReadyToWork} \n‚õΩ: ${ReadyToFeed}\n \nüö¶: ${Status}\nüèÜ: ${FestInfo}`,
    keyboard: keyboard,
    // attachment: photoUrl,
  });
});

bot.hear(/–ó–∞–ø—Ä–∞–≤–∏—Ç—å –Ω–µ–∫—Ä—É—Ö—É$/, async (msg) => {
  const userId = msg.senderId;
  const chatId = msg.peerId;

  const TimeLast = await Info.findOne({ ChatId: chatId, UserId: userId });
  if (!TimeLast) {
    msg.send("–£ –í–∞—Å –Ω–µ—Ç –Ω–µ–∫—Ä—É—Ö–∏ :(");
    return;
  }
  const FuelInfo = await Car.findOne({ ChatId: chatId, UserId: userId });
  if (FuelInfo.Fuel >= 60) {
    msg.send("–£ –≤–∞—Å –ø–æ–ª–Ω—ã–π –±–∞–∫!");
    return;
  }

  const TimeNow = new Date() * 1;
  console.log("last: ", TimeLast.TimeToFeed.getTime());
  console.log("now:", TimeNow);

  if (TimeLast.TimeToFeed.getTime() < TimeNow) {
    const TimeThen = TimeNow + 60000;
    const idCar = await Info.findOneAndUpdate(
      { ChatId: chatId, UserId: userId },
      { TimeToFeed: TimeThen },
      { upsert: true, new: true }
    );
    const fuelLimit = await Car.findOne({ ChatId: chatId, UserId: userId });
    if (fuelLimit.Fuel >= 51) {
      const Zapravka = 60 - fuelLimit.Fuel;
      const fuelid = await Car.findOneAndUpdate(
        { ChatId: chatId, UserId: userId },
        { $inc: { Fuel: Zapravka } },
        { upsert: false, new: true }
      );

      msg.send(`–í—ã –∑–∞–ø—Ä–∞–≤–∏–ª–∏ —Å–≤–æ—é –Ω–µ–∫—Ä—É—Ö—É!\n +${Zapravka}‚õΩ`);
    } else {
      const Zapravka = 10;
      const fuelid = await Car.findOneAndUpdate(
        { ChatId: chatId, UserId: userId },
        { $inc: { Fuel: Zapravka } },
        { upsert: false, new: true }
      );
      console.log(TimeThen);
      msg.send("–í—ã –∑–∞–ø—Ä–∞–≤–∏–ª–∏ —Å–≤–æ—é –Ω–µ–∫—Ä—É—Ö—É!\n +10‚õΩ");
      // return;
    }
  } else msg.send("–ó–∞–ø—Ä–∞–≤–ª—è—Ç—å –Ω–µ–∫—Ä—É—Ö—É –º–æ–∂–Ω–æ —Ä–∞–∑ –≤ 2 —á–∞—Å–∞!");
  console.log(TimeNow);

  return;
});

bot.hear(/–û—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è –Ω–∞ —Ä–∞–±–æ—Ç—É$/i, async (msg) => {
  const userId = msg.senderId;
  const chatId = msg.peerId;
  const TimeLast = await Info.findOne({ ChatId: chatId, UserId: userId });
  let LastTime = TimeLast.TimeToWork.getTime();
  const TimeNow = new Date() * 1;
  const Picture = await Car.findOne({ ChatId: chatId, UserId: userId });
  if (!Picture) {
    msg.send("–£ –í–∞—Å –Ω–µ—Ç –Ω–µ–∫—Ä—É—Ö–∏! :(");
  } else if (TimeLast.OnWork > 0 && TimeLast.WorkVar > 0) {
    msg.send("–í—ã —É–∂–µ –Ω–∞ —Ä–∞–±–æ—Ç–µ!");
  } else {
    // let keyboard;
    if (Picture.Condition === "–ù–∞ —Ö–æ–¥—É") {
      keyboard = new KeyboardBuilder()
        .row()
        .textButton({
          label: "–ú–µ—Ö–∞–Ω–∏–∫",
          payload: { command: "–ú–µ—Ö–∞–Ω–∏–∫" },
          color: Keyboard.SECONDARY_COLOR,
        })
        .row()
        .textButton({
          label: "–¢–∞–∫—Å–∏",
          payload: { command: "–¢–∞–∫—Å–∏" },
          color: Keyboard.POSITIVE_COLOR,
        })
        .row()
        .textButton({
          label: "–ö–∞—Ç–∞—Ç—å —Å–≤–∞–¥—å–±—É",
          payload: { command: "–ö–∞—Ç–∞—Ç—å —Å–≤–∞–¥—å–±—É" },
          color: Keyboard.NEGATIVE_COLOR,
        })
        .row()
        .textButton({
          label: "–ú–æ—è –Ω–µ–∫—Ä—É—Ö–∞",
          payload: { command: "–ú–æ—è –Ω–µ–∫—Ä—É—Ö–∞" },
          color: Keyboard.SECONDARY_COLOR,
        })
        .inline()
        .oneTime();

      const photoUrl = Picture.CarPicture;
      msg.send({
        message: `–£ –≤–∞—Å –µ—Å—Ç—å —Ç—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞ —Ä–∞–±–æ—Ç—ã: \n \nüîß–ú–µ—Ö–∞–Ω–∏–∫üîß \n–í—ã –±—É–¥–µ—Ç–µ —Ä–µ–º–æ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –º–∞—à–∏–Ω—ã –∏ –ø–æ–ª—É—á–∞—Ç—å –∑–∞ —ç—Ç–æ —Ö–æ—Ä–æ—à—É—é –æ–ø–ª–∞—Ç—É. –í–∞—à–∞ –Ω–µ–∫—Ä—É—Ö–∞ —Ç–æ—á–Ω–æ –Ω–µ —Å–ª–æ–º–∞–µ—Ç—Å—è.\n\nüöñ–¢–∞–∫—Å–∏—Å—Çüöñ\n–†–∞–±–æ—Ç–∞ –Ω–∞ –∫–æ–ª–µ—Å–∞—Ö! –í—ã –±—É–¥–µ—Ç–µ –ø–µ—Ä–µ–≤–æ–∑–∏—Ç—å –ª—é–¥–µ–π –ø–æ –≥–æ—Ä–æ–¥—É –∏ –ø–æ–ª—É—á–∞—Ç—å —Å–≤–æ–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫. –ù–æ –±—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã –Ω–∞ –¥–æ—Ä–æ–≥–µ, —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–ø–∞—Å–Ω–æ.\n\nüé©–ö–∞—Ç–∞—Ç—å —Å–≤–∞–¥—å–±—É üé© \n–í–∞–º –ø—Ä–µ–¥—Å—Ç–æ–∏—Ç —Ä–∞–±–æ—Ç–∞ –Ω–∞ —Å–≤–∞–¥—å–±–∞—Ö,  —Å –∫—Ä–∞—Å–∏–≤—ã–º–∏ –Ω–∞—Ä—è–¥–∞–º–∏ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ–ø–ª–æ—Ö–∏–µ –¥–µ–Ω—å–≥–∏. –ù–æ –Ω–µ –∑–∞–±—ã–≤–∞–π—Ç–µ, —á—Ç–æ –≤—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –∏—Å–ø—Ä–∞–≤–Ω—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –¥–ª—è —Å–≤–æ–∏—Ö –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤.`,
        keyboard: keyboard,
        // attachment: photoUrl,
      });
    } else if (Picture.Condition === "–ù—É–∂–µ–Ω —Ä–µ–º–æ–Ω—Ç") {
      keyboard = new KeyboardBuilder()
        .row()
        .textButton({
          label: "–ú–µ—Ö–∞–Ω–∏–∫",
          payload: { command: "–ú–µ—Ö–∞–Ω–∏–∫" },
          color: Keyboard.SECONDARY_COLOR,
        })

        .row()
        .textButton({
          label: "–ú–æ—è –Ω–µ–∫—Ä—É—Ö–∞",
          payload: { command: "–ú–æ—è –Ω–µ–∫—Ä—É—Ö–∞" },
          color: Keyboard.SECONDARY_COLOR,
        })
        .inline()
        .oneTime();

      const photoUrl = Picture.CarPicture;
      msg.send({
        message: `–í–∞—à–∞ –Ω–µ–∫—Ä—É—Ö–∞ –Ω–µ –Ω–∞ —Ö–æ–¥—É, –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É –º–µ—Ö–∞–Ω–∏–∫–æ–º: \n \nüîß–ú–µ—Ö–∞–Ω–∏–∫üîß \n–í—ã –±—É–¥–µ—Ç–µ —Ä–µ–º–æ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –º–∞—à–∏–Ω—ã –∏ –ø–æ–ª—É—á–∞—Ç—å –∑–∞ —ç—Ç–æ —Ö–æ—Ä–æ—à—É—é –æ–ø–ª–∞—Ç—É. –í–∞—à–∞ –Ω–µ–∫—Ä—É—Ö–∞ —Ç–æ—á–Ω–æ –Ω–µ —Å–ª–æ–º–∞–µ—Ç—Å—è.`,
        keyboard: keyboard,
        // attachment: photoUrl,
      });
    }
  }
});

bot.hear(/–ú–µ—Ö–∞–Ω–∏–∫$/i, async (msg) => {
  const userId = msg.senderId;
  const chatId = msg.peerId;

  const TimeLast = await Info.findOne({ ChatId: chatId, UserId: userId });
  if (!TimeLast) {
    msg.send("–£ –í–∞—Å –Ω–µ—Ç –Ω–µ–∫—Ä—É—Ö–∏");
    return;
  }
  const TimeNow = new Date() * 1;
  const TimeThen = TimeNow + 7200000;

  let LastTime = TimeLast.TimeToWork.getTime();
  console.log("lst:", TimeLast.TimeToFeed.getTime());
  console.log("now:", TimeNow);
  console.log("thn:", TimeThen);

  if (LastTime < TimeNow && TimeLast.OnWork == 0) {
    const Work = 1;
    const WorkNumber = 1;
    const idCar = await Info.findOneAndUpdate(
      { ChatId: chatId, UserId: userId },
      { TimeToWork: TimeThen, OnWork: Work, WorkVar: WorkNumber },
      { upsert: false, new: true }
    );

    console.log(TimeThen);

    msg.send("–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏—Å—å –Ω–∞ —Ä–∞–±–æ—Ç—É");

    return;
  } else if (LastTime > TimeNow && TimeLast.OnWork == 1) {
    msg.send("–í—ã —É–∂–µ –Ω–∞ —Ä–∞–±–æ—Ç–µ!");
    console.log(TimeNow);
    console.log(TimeThen);
    console.log(LastTime);
    return;
  }
});

bot.hear(/–¢–∞–∫—Å–∏$/i, async (msg) => {
  const userId = msg.senderId;
  const chatId = msg.peerId;
  const TimeLast = await Info.findOne({ ChatId: chatId, UserId: userId });
  let LastTime = TimeLast.TimeToWork.getTime();
  const TimeNow = new Date() * 1;
  if (!TimeLast) {
    msg.send("–£ –í–∞—Å –Ω–µ—Ç –Ω–µ–∫—Ä—É—Ö–∏");
    return;
  }
  const FuelInfo = await Car.findOne({ ChatId: chatId, UserId: userId });
  if (FuelInfo.Fuel < 5) {
    msg.send("–£ –í–∞—Å –º–∞–ª–æ —Ç–æ–ø–ª–∏–≤–∞!");
    return;
  }
  const CarCondition = await Car.findOne({
    ChatId: chatId,
    UserId: userId,
  });
  if (CarCondition.Condition === "–ù–∞ —Ö–æ–¥—É") {
    const TimeThen = TimeNow + 60000;

    console.log("last: ", TimeLast.TimeToFeed.getTime());
    console.log("now:", TimeNow);
    console.log("then:", TimeThen);

    if (LastTime < TimeNow && TimeLast.OnWork == 0) {
      const Work = 1;
      const WorkNumber = 2;
      const idCar = await Info.findOneAndUpdate(
        { ChatId: chatId, UserId: userId },
        { TimeToWork: TimeThen, OnWork: Work, WorkVar: WorkNumber },
        { upsert: true, new: true }
      );
      let FuelPrice = 5;
      const FuelDecrement = await Car.findOneAndUpdate(
        { ChatId: chatId, UserId: userId },
        { $inc: { Fuel: -FuelPrice } }
      );

      console.log(TimeThen);

      msg.send("üöñ –í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏—Å—å —Ä–∞–±–æ—Ç–∞—Ç—å –≤ —Ç–∞–∫—Å–∏ üöñ\n -5‚õΩ");

      return;
    }
  }
  if (CarCondition.Condition === "–ù—É–∂–µ–Ω —Ä–µ–º–æ–Ω—Ç") {
    msg.send("–í–∞—à–∞ –Ω–µ–∫—Ä—É—Ö–∞ –Ω–µ –Ω–∞ —Ö–æ–¥—É, –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É –≤ —Ç–∞–∫—Å–∏!");
  } else if (LastTime > TimeNow && TimeLast.OnWork == 1) {
    msg.send("–í—ã —É–∂–µ –Ω–∞ —Ä–∞–±–æ—Ç–µ!");
    console.log(TimeNow);
    console.log(TimeThen);
    console.log(LastTime);
    return;
  }
});

bot.hear(/–ö–∞—Ç–∞—Ç—å —Å–≤–∞–¥—å–±—É$/i, async (msg) => {
  const userId = msg.senderId;
  const chatId = msg.peerId;
  const TimeLast = await Info.findOne({ ChatId: chatId, UserId: userId });
  let LastTime = TimeLast.TimeToWork.getTime();
  if (!TimeLast) {
    msg.send("–£ –í–∞—Å –Ω–µ—Ç –Ω–µ–∫—Ä—É—Ö–∏");
    return;
  }
  const FuelInfo = await Car.findOne({ ChatId: chatId, UserId: userId });
  if (FuelInfo.Fuel < 8) {
    msg.send("–£ –í–∞—Å –º–∞–ª–æ —Ç–æ–ø–ª–∏–≤–∞!");
    return;
  }

  const CarCondition = await Car.findOne({
    ChatId: chatId,
    UserId: userId,
  });
  const TimeNow = new Date() * 1;
  if (CarCondition.Condition === "–ù–∞ —Ö–æ–¥—É") {
    const TimeThen = TimeNow + 60000;

    console.log("last: ", TimeLast.TimeToFeed.getTime());
    console.log("now:", TimeNow);
    console.log("then:", TimeThen);

    if (LastTime < TimeNow && TimeLast.OnWork == 0) {
      const Work = 1;
      const WorkNumber = 3;
      const idCar = await Info.findOneAndUpdate(
        { ChatId: chatId, UserId: userId },
        { TimeToWork: TimeThen, OnWork: Work, WorkVar: WorkNumber },
        { upsert: true, new: true }
      );
      let FuelPrice = 8;
      const FuelDecrement = await Car.findOneAndUpdate(
        { ChatId: chatId, UserId: userId },
        { $inc: { Fuel: -FuelPrice } }
      );

      console.log(TimeThen);

      msg.send("üé© –í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏—Å—å –∫–∞—Ç–∞—Ç—å —Å–≤–∞–¥—å–±—É! üé©\n -8‚õΩ");

      return;
    }
  }
  if (CarCondition.Condition === "–ù—É–∂–µ–Ω —Ä–µ–º–æ–Ω—Ç") {
    msg.send("–í–∞—à–∞ –Ω–µ–∫—Ä—É—Ö–∞ –Ω–µ –Ω–∞ —Ö–æ–¥—É, –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —à–∞—Ñ–µ—Ä–æ–º!");
  } else if (LastTime > TimeNow && TimeLast.OnWork == 1) {
    msg.send("–í—ã —É–∂–µ –Ω–∞ —Ä–∞–±–æ—Ç–µ!");
    console.log(TimeNow);
    console.log(TimeThen);
    console.log(LastTime);
    return;
  }
});

bot.hear(/–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É$/i, async (msg) => {
  const userId = msg.senderId;
  const chatId = msg.peerId;

  const TimeLast = await Info.findOne({
    ChatId: chatId,
    UserId: userId,
  });
  const WorkVarStatus = TimeLast.WorkVar;
  if (!TimeLast) {
    msg.send("–£ –í–∞—Å –Ω–µ—Ç –Ω–µ–∫—Ä—É—Ö–∏ :(");
    return;
  }
  if (TimeLast.OnWork == 0) {
    msg.send("–í—ã –Ω–µ –Ω–∞ —Ä–∞–±–æ—Ç–µ");
    return;
  }
  const TimeNow = new Date();
  if (
    TimeLast.TimeToWork.getTime() < TimeNow.getTime() &&
    TimeLast.OnWork > 0
  ) {
    if (WorkVarStatus === 1) {
      const Work = 0;
      // const TimeThen = new Date() * 1 + 120000;
      const idTime = await Info.findOneAndUpdate(
        { ChatId: chatId, UserId: userId },
        {
          //  TimeToWork: TimeThen,
          OnWork: Work,
        },
        { upsert: false, new: true } // new: true - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—å–µ–∫—Ç –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π;
      );
      console.log(idTime);

      const MoneyInc = Math.floor(Math.random() * 15) + 49; //–æ—Ç 49 –¥–æ 64
      const Exp = await Car.findOne({
        ChatId: chatId,
        UserId: userId,
      });

      const CarLevel = await Car.findOneAndUpdate(
        { ChatId: chatId, UserId: userId },
        { $inc: { Money: MoneyInc } },
        { upsert: false, new: true }
      );
      const Zero = 0;
      const TypeWork = await Info.findOneAndUpdate(
        { ChatId: chatId, UserId: userId },
        { WorkVar: Zero },
        { upsert: false, new: true }
      );
      console.log("Level: ", CarLevel);

      msg.send(`–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!\n+${MoneyInc}üíµ`);
    }
    if (WorkVarStatus === 2) {
      const Work = 0;
      // const TimeThen = new Date() * 1 + 360000;
      const idTime = await Info.findOneAndUpdate(
        { ChatId: chatId, UserId: userId },
        {
          // TimeToWork: TimeThen,
          OnWork: Work,
        },
        { upsert: false, new: true } // new: true - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—å–µ–∫—Ç –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π;
      );
      console.log(idTime);
      // console.log(TimeThen);

      const MoneyInc = Math.floor(Math.random() * 27) + 95; //95-112
      const Exp = await Car.findOne({
        ChatId: chatId,
        UserId: userId,
      });

      const ExpInc = 4;
      const lll = Exp.Level;
      const ConditionDec = Math.floor(Math.random() * 10) + 5;
      const CarLevel = await Car.findOneAndUpdate(
        { ChatId: chatId, UserId: userId },
        {
          $inc: {
            Money: MoneyInc,
            Exp: ExpInc,
            ConditionNumber: -ConditionDec,
          },
        },
        { upsert: false, new: true }
      );
      const Zero = 0;
      const TypeWork = await Info.findOneAndUpdate(
        { ChatId: chatId, UserId: userId },
        { WorkVar: Zero },
        { upsert: false, new: true }
      );
      console.log("Level: ", CarLevel);
      // –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ –Ω–∏–∂–µ –ª–∏ –Ω—É–ª—è
      const CarCond = await Car.findOne({ ChatId: chatId, UserId: userId });
      if (CarCond.ConditionNumber <= 0) {
        msg.send("–û –Ω–µ—Ç! –í–∞—à–∞ –Ω–µ–∫—Ä—É—Ö–∞ —Å–ª–æ–º–∞–ª–∞—Å—å!");
        const ZeroNumber = 0;
        const Broke = await Car.findOneAndUpdate(
          { ChatId: chatId, UserId: userId },
          { ConditionNumber: ZeroNumber, Condition: "–ù—É–∂–µ–Ω —Ä–µ–º–æ–Ω—Ç" },
          {
            upsert: false,
            new: true,
          }
        );
      }

      const nextLevelExperience = (CarLevel.Level + 5) * 2;
      if (CarLevel.Exp < nextLevelExperience) {
        msg.send(`–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!\n+${MoneyInc}üíµ \n+4üèÅ`);
        const CarBroke = Math.floor(Math.random() * 4) + 1; // 20% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å

        if (CarBroke === 1) {
          msg.send("–û –Ω–µ—Ç! –í–∞—à–∞ –Ω–µ–∫—Ä—É—Ö–∞ —Å–ª–æ–º–∞–ª–∞—Å—å!");
          const ZeroNumber = 0;
          const Broke = await Car.findOneAndUpdate(
            { ChatId: chatId, UserId: userId },
            { ConditionNumber: ZeroNumber, Condition: "–ù—É–∂–µ–Ω —Ä–µ–º–æ–Ω—Ç" },
            {
              upsert: false,
              new: true,
            }
          );
        }
      } else if (CarLevel.Exp >= nextLevelExperience) {
        const LevelUp = lll + 1;
        const Inc = CarLevel.Exp - nextLevelExperience;

        const sCar = await Car.findOneAndUpdate(
          { ChatId: chatId, UserId: userId },
          { Level: LevelUp, Exp: Inc },
          { upsert: false, new: true }
        );
        msg.send(`–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!\n+${MoneyInc}üíµ \n+4üèÅ`);
        const name = sCar.Name;

        msg.send(`–ù–µ–∫—Ä—É—Ö–∞ ${name} –ø–æ–ª—É—á–∞–µ—Ç –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å!`);
      }
    }
    if (WorkVarStatus === 3) {
      const CarBroke = Math.floor(Math.random() * 4) + 1; // 20% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å

      if (CarBroke === 1) {
        msg.send(
          "–û –Ω–µ—Ç! –í–∞—à–∞ –Ω–µ–∫—Ä—É—Ö–∞ —Å–ª–æ–º–∞–ª–∞—Å—å –ø—Ä—è–º–æ –Ω–∞ —Ä–∞–±–æ—Ç–µ! –í–∞–º –ø—Ä–∏—à–ª–æ—Å—å –≤–æ–∑–º–µ—â–∞—Ç—å –º–æ—Ä–∞–ª—å–Ω—ã–π —É—â–µ—Ä–± –æ—Ç –∏—Å–ø–æ—Ä—á–µ–Ω–Ω–æ–π —Å–≤–∞–¥—å–±—ã! - 100$! :("
        );
        const Fine = 100;

        const ZeroNumber = 0;

        const Broke = await Car.findOneAndUpdate(
          { ChatId: chatId, UserId: userId },
          {
            ConditionNumber: ZeroNumber,
            Condition: "–ù—É–∂–µ–Ω —Ä–µ–º–æ–Ω—Ç",
            $inc: { Money: -Fine },
          },
          {
            upsert: false,
            new: true,
          }
        );
        const Work = 0;
        const WorkStatus = await Info.findOneAndUpdate(
          { ChatId: chatId, UserId: userId },
          {
            OnWork: Work,
            WorkVar: Work,
          },
          { upsert: false, new: true }
        );
      } else {
        const Work = 0;
        // const TimeThen = new Date() * 1 + 360000;
        const idTime = await Info.findOneAndUpdate(
          { ChatId: chatId, UserId: userId },
          {
            // TimeToWork: TimeThen,
            OnWork: Work,
            WorkVar: Work,
          },
          { upsert: false, new: true } // new: true - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—å–µ–∫—Ç –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π;
        );
        console.log(idTime);
        // console.log(TimeThen);

        const MoneyInc = Math.floor(Math.random() * 75) + 269; //269-344
        const Exp = await Car.findOne({
          ChatId: chatId,
          UserId: userId,
        });

        const ExpInc = 6;
        const lll = Exp.Level;

        const ConditionDec = Math.floor(Math.random() * 15) + 10;
        const CarLevel = await Car.findOneAndUpdate(
          { ChatId: chatId, UserId: userId },
          {
            $inc: {
              Money: MoneyInc,
              Exp: ExpInc,
              ConditionNumber: -ConditionDec,
            },
          },
          { upsert: false, new: true }
        );
        const CarCond = await Car.findOne({
          ChatId: chatId,
          UserId: userId,
        });

        if (CarCond.ConditionNumber <= 0) {
          msg.send("–û –Ω–µ—Ç! –í–∞—à–∞ –Ω–µ–∫—Ä—É—Ö–∞ —Å–ª–æ–º–∞–ª–∞—Å—å!");
          const ZeroNumber = 0;
          const Broke = await Car.findOneAndUpdate(
            { ChatId: chatId, UserId: userId },
            { ConditionNumber: ZeroNumber, Condition: "–ù—É–∂–µ–Ω —Ä–µ–º–æ–Ω—Ç" },
            {
              upsert: false,
              new: true,
            }
          );
        }

        const Zero = 0;
        const TypeWork = await Info.findOneAndUpdate(
          { ChatId: chatId, UserId: userId },
          { WorkVar: Zero },
          { upsert: false, new: true }
        );
        console.log("Level: ", CarLevel);
        const nextLevelExperience = (CarLevel.Level + 5) * 2;
        if (CarLevel.Exp < nextLevelExperience) {
          msg.send(`–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!\n+${MoneyInc}üíµ \n+6üèÅ`);
        }
        if (CarLevel.Exp >= nextLevelExperience) {
          const LevelUp = lll + 1;
          const Inc = CarLevel.Exp - nextLevelExperience;

          const sCar = await Car.findOneAndUpdate(
            { ChatId: chatId, UserId: userId },
            { Level: LevelUp, Exp: Inc },
            { upsert: true, new: true }
          );
          msg.send(`–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!\n+${MoneyInc}üíµ \n+6üèÅ`);
          const name = sCar.Name;

          msg.send(`–ù–µ–∫—Ä—É—Ö–∞ ${name} –ø–æ–ª—É—á–∞–µ—Ç –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å!`);
        }
      }
    }
  } else {
    msg.send("–í—ã —É–∂–µ –Ω–∞ —Ä–∞–±–æ—Ç–µ!");
  }
});
bot.hear(/–ì–∞—Ä–∞–∂$/i, async (msg) => {
  const userId = msg.senderId;
  const chatId = msg.peerId;
  // let keyboard;
  //–ü–†–û–í–ï–†–ö–ê –ù–ê–õ–ò–ß–ò–Ø –ù–ï–ö–†–£–•–ò
  const NewDate = new Date();
  const CarDB = await Car.findOne({ ChatId: chatId, UserId: userId });
  const CarInfo = await Info.findOne({ ChatId: chatId, UserId: userId });
  console.log(CarDB.Condition);
  let MessageText;
  let Condition = CarDB.Condition;
  let Parts = CarInfo.ZapParts;
  if (Condition === "–ù–∞ —Ö–æ–¥—É") {
    keyboard = Keyboard.builder()

      .row()
      .textButton({
        label: "–ú–æ—è –Ω–µ–∫—Ä—É—Ö–∞",
        payload: { command: "–ú–æ—è –Ω–µ–∫—Ä—É—Ö–∞" },
        color: Keyboard.SECONDARY_COLOR,
      })
      .inline()
      .oneTime();

    MessageText = `–ù–∞ —Ö–æ–¥—É(${CarDB.ConditionNumber})`;
  } else if (
    Condition === "–ù—É–∂–µ–Ω —Ä–µ–º–æ–Ω—Ç" &&
    Parts < 1 &&
    CarInfo.AutoServiceStatus == false
  ) {
    keyboard = Keyboard.builder()
      .row()
      .textButton({
        label: "–ù–∞–π—Ç–∏ –∑–∞–ø—á–∞—Å—Ç–∏",
        payload: { command: "–ù–∞–π—Ç–∏ –∑–∞–ø—á–∞—Å—Ç–∏" },
        color: Keyboard.POSITIVE_COLOR,
      })

      .row()
      .textButton({
        label: "–ú–æ—è –Ω–µ–∫—Ä—É—Ö–∞",
        payload: { command: "–ú–æ—è –Ω–µ–∫—Ä—É—Ö–∞" },
        color: Keyboard.SECONDARY_COLOR,
      })
      .inline()
      .oneTime();

    MessageText = `–ù—É–∂–µ–Ω —Ä–µ–º–æ–Ω—Ç!`;
  } else if (
    Condition === "–ù—É–∂–µ–Ω —Ä–µ–º–æ–Ω—Ç" &&
    Parts >= 1 &&
    CarInfo.AutoServiceStatus == false
  ) {
    keyboard = Keyboard.builder()
      .row()
      .textButton({
        label: "–û—Ç—Ä–µ–º–æ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–µ–∫—Ä—É—Ö—É",
        payload: { command: "–û—Ç—Ä–µ–º–æ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–µ–∫—Ä—É—Ö—É" },
        color: Keyboard.POSITIVE_COLOR,
      })
      .row()
      .textButton({
        label: "–ù–∞–π—Ç–∏ –∑–∞–ø—á–∞—Å—Ç–∏",
        payload: { command: "–ù–∞–π—Ç–∏ –∑–∞–ø—á–∞—Å—Ç–∏" },
        color: Keyboard.POSITIVE_COLOR,
      })
      .row()
      .textButton({
        label: "–ú–æ—è –Ω–µ–∫—Ä—É—Ö–∞",
        payload: { command: "–ú–æ—è –Ω–µ–∫—Ä—É—Ö–∞" },
        color: Keyboard.SECONDARY_COLOR,
      })
      .inline()
      .oneTime();

    MessageText = `–ù—É–∂–µ–Ω —Ä–µ–º–æ–Ω—Ç!`;
  } else if (
    Condition === "–ù—É–∂–µ–Ω —Ä–µ–º–æ–Ω—Ç" &&
    Parts < 1 &&
    CarInfo.AutoServiceStatus == true &&
    CarInfo.AutoServiceTime < NewDate
  ) {
    keyboard = Keyboard.builder()
      .row()

      .textButton({
        label: "–ó–∞–±—Ä–∞—Ç—å –Ω–µ–∫—Ä—É—Ö—É",
        payload: { command: "–ó–∞–±—Ä–∞—Ç—å –Ω–µ–∫—Ä—É—Ö—É" },
        color: Keyboard.POSITIVE_COLOR,
      })

      .oneTime();

    MessageText = `–ú–æ–∂–Ω–æ –∑–∞–±—Ä–∞—Ç—å –Ω–µ–∫—Ä—É—Ö—É!`;
  } else if (
    Condition === "–ù—É–∂–µ–Ω —Ä–µ–º–æ–Ω—Ç" &&
    Parts < 1 &&
    CarInfo.AutoServiceStatus == true &&
    CarInfo.AutoServiceTime > NewDate
  ) {
    keyboard = Keyboard.builder()

      .row()
      .textButton({
        label: "–ú–æ—è –Ω–µ–∫—Ä—É—Ö–∞",
        payload: { command: "–ú–æ—è –Ω–µ–∫—Ä—É—Ö–∞" },
        color: Keyboard.SECONDARY_COLOR,
      })
      .inline()
      .oneTime();

    MessageText = `–ù–µ–∫—Ä—É—Ö–∞ –Ω–∞ —Ä–µ–º–æ–Ω—Ç–µ –≤ –∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å–µ.`;
  } else if (
    Condition === "–ù—É–∂–µ–Ω —Ä–µ–º–æ–Ω—Ç" &&
    Parts >= 1 &&
    CarInfo.AutoServiceStatus == true &&
    CarInfo.AutoServiceTime < NewDate
  ) {
    keyboard = Keyboard.builder()
      .row()

      .textButton({
        label: "–ó–∞–±—Ä–∞—Ç—å –Ω–µ–∫—Ä—É—Ö—É",
        payload: { command: "–ó–∞–±—Ä–∞—Ç—å –Ω–µ–∫—Ä—É—Ö—É" },
        color: Keyboard.POSITIVE_COLOR,
      })

      .oneTime();

    MessageText = `–ú–æ–∂–Ω–æ –∑–∞–±—Ä–∞—Ç—å –Ω–µ–∫—Ä—É—Ö—É!`;
  } else if (
    Condition === "–ù—É–∂–µ–Ω —Ä–µ–º–æ–Ω—Ç" &&
    Parts >= 1 &&
    CarInfo.AutoServiceStatus == true &&
    CarInfo.AutoServiceTime > NewDate
  ) {
    keyboard = Keyboard.builder()

      .row()
      .textButton({
        label: "–ú–æ—è –Ω–µ–∫—Ä—É—Ö–∞",
        payload: { command: "–ú–æ—è –Ω–µ–∫—Ä—É—Ö–∞" },
        color: Keyboard.SECONDARY_COLOR,
      })
      .inline()
      .oneTime();

    MessageText = `–ù–µ–∫—Ä—É—Ö–∞ –Ω–∞ —Ä–µ–º–æ–Ω—Ç–µ –≤ –∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å–µ.`;
  }
  console.log(MessageText);
  // –ü–æ–º–µ–Ω—è—Ç—å —Ñ–æ—Ç–æ –≥–∞—Ä–∞–∂–∞
  const Items = await Info.findOne({
    ChatId: chatId,
    UserId: userId,
  });

  const photo = "photo-218124566_457239047";
  msg.send({
    message: `üõ†–°–æ—Å—Ç–æ—è–Ω–∏–µ: ${MessageText}\n \nüì¶–ó–∞–ø—á–∞—Å—Ç–∏: ${Items.ZapParts}\nüíà–ë–∞–ª–ª–æ–Ω—á–∏–∫–∏ —Å –∫—Ä–∞—Å–∫–æ–π: ${Items.PaintBallon}`,
    keyboard: keyboard,
    attachment: photo,
  });
});

bot.hear(/–ù–∞–π—Ç–∏ –∑–∞–ø—á–∞—Å—Ç–∏$/, async (msg) => {
  const userId = msg.senderId;
  const chatId = msg.peerId;

  let keyboard = Keyboard.builder()
    .row()
    .textButton({
      label: "–û—Ç–¥–∞—Ç—å –≤ –∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å",
      payload: { command: "–û—Ç–¥–∞—Ç—å –≤ –∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å" },
      color: Keyboard.POSITIVE_COLOR,
    })
    .row()
    .textButton({
      label: "–ú–æ—è –Ω–µ–∫—Ä—É—Ö–∞",
      payload: { command: "–ú–æ—è –Ω–µ–∫—Ä—É—Ö–∞" },
      color: Keyboard.SECONDARY_COLOR,
    })
    .inline()
    .oneTime();

  const Price = await Info.findOne({ ChatId: chatId, UserId: userId });
  let Repair = Price.RepairPrice;
  console.log("–¶–µ–Ω–∞ —Ä–µ–º–æ–Ω—Ç–∞:", Repair);
  if (Repair == 0) {
    let PriceResult = Math.floor(Math.random() * 65) + 99;
    const UpdateDB = await Info.findOneAndUpdate(
      { ChatId: chatId, UserId: userId },
      { RepairPrice: PriceResult }
    );
  }

  // const photo = "photo-218124566_457239047";
  msg.send({
    message: `–°—Ç–æ–∏–º–æ—Å—Ç—å: ${Repair}üíµ \n–í—Ä–µ–º—è —Ä–µ–º–æ–Ω—Ç–∞: 2 –º–∏–Ω.`,
    keyboard: keyboard,
    // attachment: photo,
  });
});

bot.hear(/–û—Ç–¥–∞—Ç—å –≤ –∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å$/, async (msg) => {
  const userId = msg.senderId;
  const chatId = msg.peerId;

  const Price = await Info.findOne({ ChatId: chatId, UserId: userId });
  let Repair = Price.RepairPrice;
  const MoneyExist = await Car.findOne({ ChatId: chatId, UserId: userId });
  let Money = MoneyExist.Money;
  if (Money >= Repair) {
    const DecMoney = await Car.findOneAndUpdate(
      { ChatId: chatId, UserId: userId },
      {
        $inc: { Money: -Repair },
      }
    );

    const TimeNow = new Date() * 1;
    const TimeThen = TimeNow + 60000;

    // let LastTime = TimeLast.TimeToWork.getTime();

    const TimeAutoServ = await Info.findOneAndUpdate(
      { ChatId: chatId, UserId: userId },
      {
        AutoServiceTime: TimeThen,
        AutoServiceStatus: true,
      }
    );

    msg.send({
      message: `–í—ã –æ—Ç–¥–∞–ª–∏ –Ω–µ–∫—Ä—É—Ö—É –≤ —Å–µ—Ä–≤–∏—Å.`,
      // keyboard: keyboard,
      // attachment: photo,
    });
  } else {
    msg.send("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥!");
  }
});

bot.hear(/–ó–∞–±—Ä–∞—Ç—å –Ω–µ–∫—Ä—É—Ö—É$/, async (msg) => {
  const userId = msg.senderId;
  const chatId = msg.peerId;

  const Price = await Info.findOne({ ChatId: chatId, UserId: userId });
  //  const Money = await Car.findOne({ ChatId: chatId, UserId: userId });
  let NewDate = new Date() * 1;
  if (Price.AutoServiceTime < NewDate && Price.AutoServiceStatus == true) {
    let number = 100;
    let Zero = 0;
    const Money = await Car.findOneAndUpdate(
      { ChatId: chatId, UserId: userId },
      { Condition: "–ù–∞ —Ö–æ–¥—É", ConditionNumber: number }
    );
    const CarInfo = await Info.findOneAndUpdate(
      { ChatId: chatId, UserId: userId },
      {
        RepairPrice: Zero,
        AutoServiceStatus: false,
      }
    );

    msg.send(`–ù–µ–∫—Ä—É—Ö–∞ ${Money.Name} —Å–Ω–æ–≤–∞ –Ω–∞ —Ö–æ–¥—É!`);
  } else if (Price.AutoServiceTime > NewDate) {
    msg.send(`–í–∞—à–∞ –Ω–µ–∫—Ä—É—Ö–∞ –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤–∞!`);
  } else if (Price.AutoServiceStatus == false) {
    msg.send(`–í–∞—à–∞ –Ω–µ–∫—Ä—É—Ö–∞ –≤–Ω–µ –∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å–∞!`);
  }
});

// bot.hear(/–ü—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏$/i, async (msg) => {
//   const userId = msg.senderId;
//   const chatId = msg.peerId;

//   const Prinadlezhnosti = await Info.findOne({
//     ChatId: chatId,
//     UserId: userId,
//   });
//   const keyboard = Keyboard.builder()

//     .row()
//     .textButton({
//       label: "–ú–æ—è –Ω–µ–∫—Ä—É—Ö–∞",
//       payload: { command: "–ú–æ—è –Ω–µ–∫—Ä—É—Ö–∞" },
//       color: Keyboard.SECONDARY_COLOR,
//     })
//     .inline()
//     .oneTime();

//   const oCar = await Car.findOne({ ChatId: chatId, UserId: userId });
//   const photo = "photo-218124566_457239046";
//   msg.send({
//     message: `–ü—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏ –Ω–µ–∫—Ä—É—Ö–∏ ${oCar.Name}: \n \n–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –∫–∞–Ω–∏—Å—Ç—Ä–∞: ${Prinadlezhnosti.Kanistra}\n–ù–∞–±–æ—Ä –∫–ª—é—á–µ–π: ${Prinadlezhnosti.Keys}\n–ê–ø—Ç–µ—á–∫–∞: ${Prinadlezhnosti.FirstAid}`,
//     keyboard: keyboard,
//     attachment: photo,
//   });
// });

// bot.hear(/–û—Å–Ω–∞—â–µ–Ω–∏–µ$/i, async (msg) => {
//   const userId = msg.senderId;
//   const chatId = msg.peerId;

//   // –ü–†–û–í–ï–†–ö–ê –ù–ê–õ–ò–ß–ò–Ø –ù–ï–ö–†–£–•–ò
//   const Equipment = await Info.findOne({ ChatId: chatId, UserId: userId });

//   const keyboard = Keyboard.builder()

//     .row()
//     .textButton({
//       label: "–ú–æ—è –Ω–µ–∫—Ä—É—Ö–∞",
//       payload: { command: "–ú–æ—è –Ω–µ–∫—Ä—É—Ö–∞" },
//       color: Keyboard.SECONDARY_COLOR,
//     })
//     .inline()
//     .oneTime();
//   const oCar = await Car.findOne({ ChatId: chatId, UserId: userId });

//   const photo = "photo-218124566_457239045";
//   msg.send({
//     message: `–û—Å–Ω–∞—â–µ–Ω–∏–µ –Ω–µ–∫—Ä—É—Ö–∏ ${oCar.Name}: \n \n–î–≤–∏–≥–∞—Ç–µ–ª—å: ${Equipment.Engine}\n–ü–æ–¥–≤–µ—Å–∫–∞: ${Equipment.Suspension}\n–û–±–≤–µ—Å—ã: ${Equipment.Bumpers}\n–ö–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä: ${Equipment.Conditioner}\n–°–∞–ª–æ–Ω: ${Equipment.Saloon}\n–§–∞—Ä—ã: ${Equipment.Headlights}\n–§–æ–Ω–∞—Ä–∏: ${Equipment.Taillights}\n–†—É–ª—å: ${Equipment.SteeringWheel}\n–í–æ–Ω—é—á–∫–∞ "–Å–ª–æ—á–∫–∞": ${Equipment.StinkyTree}`,
//     keyboard: keyboard,
//     attachment: photo,
//   });
// });

// bot.hear(/–û—Ç—Ä–µ–º–æ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–µ–∫—Ä—É—Ö—É$/i, async (msg) => {
//   const userId = msg.senderId;
//   const chatId = msg.peerId;
//   const CarDB = await Car.findOne({ ChatId: chatId, UserId: userId });
//   // const Money = await Car.findOne({
//   //   –°hatId: chatId,
//   //   UserId: userId,
//   //   Money: { $gte: 50 },
//   // });
//   if (CarDB.Money < 50) {
//     msg.send("–£ –í–∞—Å –Ω–µ—Ç –¥–µ–Ω–µ–≥ –Ω–∞ —Ä–µ–º–æ–Ω—Ç!");
//   } else if (CarDB.Condition === "–ù–∞ —Ö–æ–¥—É") {
//     msg.send("–†–µ–º–æ–Ω—Ç –Ω–µ –Ω—É–∂–µ–Ω, –í–∞—à–∞ –Ω–µ–∫—Ä—É—Ö–∞ –µ—â–µ –ø–æ—Ö–æ–¥–∏—Ç!");
//     console.log("Money.Condition: ", Money.Condition);
//   } else {
//     // –°–Ω–∏–º–∞–µ–º –¥–µ–Ω—å–≥–∏ –∑–∞ —Ä–µ–º–æ–Ω—Ç –∏ —Ä–µ–º–æ–Ω—Ç–∏—Ä—É–µ–º –Ω–µ–∫—Ä—É—Ö—É
//     const RepairPrice = 50;
//     const Number = 100;
//     const PayToRace = await Car.findOneAndUpdate(
//       {
//         ChatId: chatId,
//         UserId: userId,
//       },
//       {
//         $inc: { Money: -RepairPrice },
//         ConditionNumber: Number,
//         Condition: "–ù–∞ —Ö–æ–¥—É",
//       }
//     );
//     msg.send(`–ù–µ–∫—Ä—É—Ö–∞ ${CarDB.Name} —Å–Ω–æ–≤–∞ –Ω–∞ —Ö–æ–¥—É!`);
//   }
// });

bot.hear(/–ì–æ–Ω–∫–∞$/i, async (msg) => {
  const userId = msg.senderId;
  const chatId = msg.peerId;
  const keyboard = Keyboard.builder()
    .row()
    .textButton({
      label: "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è",
      payload: { command: "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è" },
      color: Keyboard.POSITIVE_COLOR,
    })
    .row()
    .textButton({
      label: "–ù–∞—á–∞—Ç—å –≥–æ–Ω–∫—É",
      payload: { command: "–ù–∞—á–∞—Ç—å –≥–æ–Ω–∫—É" },
      color: Keyboard.NEGATIVE_COLOR,
    })

    .row()
    .textButton({
      label: "–ú–æ—è –Ω–µ–∫—Ä—É—Ö–∞",
      payload: { command: "–ú–æ—è –Ω–µ–∫—Ä—É—Ö–∞" },
      color: Keyboard.SECONDARY_COLOR,
    })
    .inline()
    .oneTime();

  //–Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ —Ñ–æ—Ç–æ –¥–ª—è –≤–∫–ª–∞–¥–∫–∏ "–≥–æ–Ω–∫–∞"
  const photoUrl = "photo-218124566_457239022";

  msg.send({
    message: `–î–ª—è —É—á–∞—Å—Ç–∏—è –≤ –≥–æ–Ω–∫–µ –Ω–∞–∂–º–∏—Ç–µ "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è". –°—Ç–æ–∏–º–æ—Å—Ç—å —É—á–∞—Å—Ç–∏—è 50$, –ø–æ–±–µ–¥–∏—Ç–µ–ª—å –∑–∞–±–∏—Ä–∞–µ—Ç –∫–∞—Å—Å—É.\n –ù–∞–∂–º–∏—Ç–µ "–ù–∞—á–∞—Ç—å –≥–æ–Ω–∫—É", —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –≥–æ–Ω–∫—É.\n  –ì–æ–Ω–∫–∞ –Ω–∞—á–Ω–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –∫–æ–≥–¥–∞ –Ω–∞–±–µ—Ä–µ—Ç—Å—è 5 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.`,
    keyboard: keyboard,
    attachment: photoUrl,
  });
});

bot.hear(/–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è$/, async (msg) => {
  const userId = msg.senderId;
  const chatId = msg.peerId;
  const User = await Info.findOne({
    ChatId: chatId,
    UserId: userId,
    StatusRace: true,
  });
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –¥–ª—è –∏–≥—Ä—ã
  if (User && User.StatusRace == true) {
    msg.send("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ –≥–æ–Ω–∫–µ.");
  } else {
    const Money = await Car.findOne({
      –°hatId: chatId,
      UserId: userId,
      Money: { $gte: 50 },
    });
    if (!Money) {
      msg.send("–£ –í–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥!");
    } else if (Money.Condition === "–ù—É–∂–µ–Ω —Ä–µ–º–æ–Ω—Ç") {
      msg.send("–í–∞—à–∞ –Ω–µ–∫—Ä—É—Ö–∞ –Ω–µ –Ω–∞ —Ö–æ–¥—É!");
    } else {
      // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∏–≥—Ä—ã
      const bet = 50;
      console.log("userId:" + userId + "  chatId" + chatId);
      const PayToRace = await Car.findOneAndUpdate(
        {
          ChatId: chatId,
          UserId: userId,
        },
        { $inc: { Money: -bet } }
      );
      console.log("PayToRace" + PayToRace);
      const RegToRace = await Info.findOneAndUpdate(
        {
          ChatId: chatId,
          UserId: userId,
        },
        { StatusRace: true }
      );
      console.log("RegToRace" + RegToRace);
      const CountExist = await RaceCount.findOne({
        ChatId: chatId,
      });
      if (!CountExist) {
        let Number = 0;
        const CountOfRacers = await RaceCount.create({
          NumberOfRacers: Number,
          ChatId: chatId,
        });
      }
      let AddOne = 1;
      const AddRacer = await RaceCount.findOneAndUpdate({
        $inc: { NumberOfRacers: AddOne },
        ChatId: chatId,
      });

      msg.send("–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ñ–¥–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π.");
    }
  }
});
bot.hear(/–ù–∞—á–∞—Ç—å –≥–æ–Ω–∫—É/i, async (msg) => {
  const userId = msg.senderId;
  const chatId = msg.peerId;
  const CountRacers = await RaceCount.findOne({
    ChatId: chatId,
  });
  if (CountRacers == "null") {
    msg.send("–ù–∏–∫—Ç–æ –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ –≥–æ–Ω–∫–µ!");
  }
  if (CountRacers && CountRacers.NumberOfRacers === 1) {
    msg.send("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —É—á–∞—Å—Ç–Ω–∏–∫!");
  }

  if (CountRacers && CountRacers.NumberOfRacers > 1) {
    const result = await Info.find({
      ChatId: chatId,
      StatusRace: true,
    });

    // setTimeout(async () => {
    //–∑–¥–µ—Å—å –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –∏–∑ –º–∞—Å—Å–∏–≤–∞ result, —á—Ç–æ–±—ã –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
    let RaceWinner = Math.floor(Math.random() * result.length);

    let Winner = result[RaceWinner];
    console.log("RESULT" + Winner);
    const WinnerName = Winner.UserId;
    const WinnerResult = await Car.findOne({
      ChatId: chatId,
      UserId: WinnerName,
    });
    const Coefficent = CountRacers.NumberOfRacers;
    const WinSum = 50 * Coefficent;
    msg.send(
      `–ü–æ–±–µ–¥–∏—Ç–µ–ª—å –≥–æ–Ω–∫–∏ - ${WinnerResult.Name}, –í—ã–∏–≥—Ä—ã—à —Å–æ—Å—Ç–∞–≤–∏–ª - ${WinSum}$`
    );

    const MoneyWin = await Car.findOneAndUpdate(
      { ChatId: chatId, UserId: userId },
      { $inc: { Money: WinSum } }
    );
    const DeleteCount = await RaceCount.findOneAndDelete({
      ChatId: chatId,
    });
    const DeleteStatusRace = await Info.updateMany(
      {
        ChatId: chatId,
        StatusRace: true,
      },
      { StatusRace: false }
    );
    // }, 5000);
  }
});

// bot.hear(/^–ö–∞–ø—Å—É–ª–∞ –ø–æ–º–æ—â—å$/i, async (msg) => {
//   msg.send(
//     `–°–ø–∏—Å–æ–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥:\n \n–•–æ—á—É –Ω–µ–∫—Ä—É—Ö—É\n–í–∑—è—Ç—å –Ω–µ–∫—Ä—É—Ö—É\n–î–∞—Ç—å –Ω–µ–∫—Ä—É—Ö–µ –∏–º—è\n–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É\n–†—É–ª–µ—Ç–∫–∞\n–£–π—Ç–∏ —Å–æ —Å–≤–µ—Ç–æ—Ñ–æ—Ä–∞\n–°–¥–∞—Ç—å –Ω–µ–∫—Ä—É—Ö—É\n \n–û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –Ω–∞ –∫–Ω–æ–ø–∫–∞—Ö\n \n"–ö–ª—É–±" –∏ "–ú—É–∑–µ–π" –ø–æ–∫–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã \n \n \n–ì–ª—é–∫–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç) \n–ö–∞–ø—Å—É–ª–∞ –±–æ—Ç v0.9 =)`
//   );
// });

// bot.hear(/–ú–æ—è –Ω–µ–∫—Ä—É—Ö–∞/i, (msg) => {
//   if (msg.isOutbox) return;
//   const car = await Car.findOne({ ObjectId: msg.senderId });
//   msg.send(
//     `üöó–ú–æ–¥–µ–ª—å: ${idCar.Name}\n üèÜ–£—Ä–æ–≤–µ–Ω—å: ${idCar.Level}\n ‚öô–°–æ—Å—Ç–æ—è–Ω–∏–µ: ${idCar.Health}\n ‚ö†–ú–∞—Å–ª–æ: ${idCar.Oil}\n ‚õΩ–¢–æ–ø–ª–∏–≤–æ: ${idCar.Fuel}\n üíµ–î–µ–Ω—å–≥–∏: ${idCar.Money}\n`
//   );
// });

// vk.updates.on("message", async (context, next) => {
//   if (context.payload && context.payload.command === "–ò–Ω—Ñ–æ") {
//     // –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–µ–Ω –≤—ã–ø–æ–ª–Ω–∏—Ç—å—Å—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É
//     console.log("–ö–Ω–æ–ø–∫–∞ '–ù–µ–∫—Ä—É—Ö–∞ –ò–Ω—Ñ–æ' –Ω–∞–∂–∞—Ç–∞!");
//   }
//   await next();
// });

bot.hear(/^–†—É–ª–µ—Ç–∫–∞/gi, async (msg) => {
  const userId = msg.senderId;
  const chatId = msg.peerId;

  const regex = /^–†—É–ª–µ—Ç–∫–∞ (.+)/i;
  const match = regex.exec(msg.text);
  console.log(match);
  if (match == null) {
    msg.send(`–ü—Ä–∏–º–µ—Ä—ã —Å—Ç–∞–≤–∫–∏:
     \n"–†—É–ª–µ—Ç–∫–∞ 50 –∫—Ä–∞—Å–Ω–æ–µ" - —Å—Ç–∞–≤–∫–∞ 50$ –Ω–∞ —Ü–≤–µ—Ç, \n"—Ä—É–ª–µ—Ç–∫–∞ 50 22" - —Å—Ç–∞–≤–∫–∞ 50$ –Ω–∞ —á–∏—Å–ª–æ 22.`);
    return;
  }
  if (match) {
    const args = match[1].split(" ");
    let playerBet = args[0];
    let playerChoice = args[1];
    console.log(playerBet);
    if (!playerChoice) {
      msg.send(`–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Ç–∞–≤–∫—É. –ü—Ä–∏–º–µ—Ä—ã —Å—Ç–∞–≤–∫–∏:
       \n"–†—É–ª–µ—Ç–∫–∞ 50 –∫—Ä–∞—Å–Ω–æ–µ" - —Å—Ç–∞–≤–∫–∞ 50$ –Ω–∞ —Ü–≤–µ—Ç, \n"—Ä—É–ª–µ—Ç–∫–∞ 50 22" - —Å—Ç–∞–≤–∫–∞ 50$ –Ω–∞ —á–∏—Å–ª–æ 22.`);
      return;
    }
    const balance = await Car.findOne({ ChatId: chatId, UserId: userId });
    if (!balance) {
      msg.send("–£ –í–∞—Å –Ω–µ—Ç –Ω–µ–∫—Ä—É—Ö–∏! –ö–∞–∑–∏–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ!");
    } else if (playerBet <= 0) {
      msg.send("–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0$!");
    } else if (playerBet === "-") {
      msg.send(`–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Ç–∞–≤–∫—É. –ü—Ä–∏–º–µ—Ä—ã —Å—Ç–∞–≤–∫–∏:
       \n"–†—É–ª–µ—Ç–∫–∞ 50 –∫—Ä–∞—Å–Ω–æ–µ" - —Å—Ç–∞–≤–∫–∞ 50$ –Ω–∞ —Ü–≤–µ—Ç, \n"—Ä—É–ª–µ—Ç–∫–∞ 50 22" - —Å—Ç–∞–≤–∫–∞ 50$ –Ω–∞ —á–∏—Å–ª–æ 22.`);
    } else if (playerBet <= balance.Money) {
      playerBet = parseFloat(playerBet);
      console.log(playerBet);
      const DecrBet = await Car.findOneAndUpdate(
        {
          ChatId: chatId,
          UserId: userId,
        },
        { $inc: { Money: -playerBet } },
        { new: true }
      );

      // bot.sendMessage(
      //   chatId,
      //   `You've placed a bet of ${playerBet} on ${playerChoice}. Good luck!`
      // );

      const number = Math.floor(Math.random() * 37); // 0-36
      let color = "";
      if (number === 0) {
        color = "–∑–µ–ª–µ–Ω–æ–µ";
      } else if (number % 2 === 0) {
        color = "—á–µ—Ä–Ω–æ–µ";
      } else {
        color = "–∫—Ä–∞—Å–Ω–æ–µ";
      }

      let resultMessage = `–í—ã–ø–∞–ª–æ ${number} ${color}. `;
      if (playerChoice === color) {
        playerBet = playerBet * 2;
        const Win = await Car.findOneAndUpdate(
          {
            ChatId: chatId,
            UserId: userId,
          },
          { $inc: { Money: playerBet } },
          { new: true }
        );
        resultMessage += `\n–í—ã –≤—ã–π–≥—Ä–∞–ª–∏ ${playerBet}üíµ üòÉ \n–í–∞—à —Å—á–µ—Ç ${
          balance.Money + playerBet / 2
        }üíµ`;
      } else if (playerChoice == number) {
        playerBet = playerBet * 36;
        const Win = await Car.findOneAndUpdate(
          {
            ChatId: chatId,
            UserId: userId,
          },
          { $inc: { Money: playerBet } },
          { new: true }
        );
        resultMessage += `ü§™ –í–∞—É!!! –í—ã –≤—ã–π–≥—Ä–∞–ª–∏ ${playerBet}$!üëç –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!`;
      } else {
        resultMessage += `\n–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ ${playerBet}üíµ üò± \n–í–∞—à —Å—á–µ—Ç ${
          balance.Money - playerBet
        }üíµ`;
      }
      // msg.send(resultMessage);

      // const pictureRoulette = "photo-218124566_457239030";
      msg.send({
        message: resultMessage,

        // attachment: pictureRoulette,
      });
    } else {
      msg.send("–£ –í–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–µ–Ω–µ–≥ –¥–ª—è —ç—Ç–æ–π —Å—Ç–∞–≤–∫–∏.");
    }
  }
});
bot.hear(/–ë–ú–í —Ñ–µ—Å—Ç$/i, async (msg) => {
  const userId = msg.senderId;
  const chatId = msg.peerId;
  // let keyboard;
  const check = await Car.findOne({ ChatId: chatId, UserId: userId });
  if (!check) {
    msg.send("–£ –í–∞—Å –Ω–µ—Ç –Ω–µ–∫—Ä—É—Ö–∏! :(");
  } else {
    keyboard = new KeyboardBuilder()
      .row()
      .textButton({
        label: "–ó–∞–¥—É—Ç—å –∞—Ä–æ—á–∫—É",
        payload: { command: "–ó–∞–¥—É—Ç—å –∞—Ä–æ—á–∫—É" },
        color: Keyboard.POSITIVE_COLOR,
      })
      .row()
      .textButton({
        label: "–û—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è –Ω–∞ —Ñ–µ—Å—Ç",
        payload: { command: "–û—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è –Ω–∞ —Ñ–µ—Å—Ç" },
        color: Keyboard.NEGATIVE_COLOR,
      })

      .row()
      .textButton({
        label: "–ú–æ—è –Ω–µ–∫—Ä—É—Ö–∞",
        payload: { command: "–ú–æ—è –Ω–µ–∫—Ä—É—Ö–∞" },
        color: Keyboard.SECONDARY_COLOR,
      })
      .inline()
      .oneTime();

    const photo = "photo-218124566_457239031";

    msg.send({
      message: `–•–æ—á–µ—à—å –∑–∞–¥—É—Ç—å –∞—Ä–æ—á–∫—É –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è –Ω–∞ –±–∏–º–º–µ—Ä-—Ñ–µ—Å—Ç?\n–ó–∞–¥—É–≤–∞–π –∏ –µ–∑–∂–∞–π!\n–° —Ç–µ–±—è 50$ –∑–∞ –∞—Ä–∫—É –∏ 10‚õΩ –Ω–∞ –¥–æ—Ä–æ–≥—É.\n`,
      keyboard: keyboard,
      attachment: photo,
    });
  }
});
bot.hear(/–ó–∞–¥—É—Ç—å –∞—Ä–æ—á–∫—É$/, async (msg) => {
  const userId = msg.senderId;
  const chatId = msg.peerId;

  const CheckArc = await Time.findOne({ ChatId: chatId, UserId: userId });
  let Check = CheckArc.StatusArc;
  console.log(Check);
  if (Check) {
    msg.send("–í–∞—à–∞ –∞—Ä–∫–∞ –µ—â–µ –ø–æ—Ö–æ–¥–∏—Ç!\n–ú–æ–∂–Ω–æ –Ω–∞ —Ñ–µ—Å—Ç!");
  } else if (!Check) {
    const MoneyCheck = await Car.findOne({ ChatId: chatId, UserId: userId });
    let Money = MoneyCheck.Money;
    console.log(Money);
    if (Money < 50) {
      msg.send("–£ —Ç–µ–±—è –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–µ–Ω–µ–≥!");
    } else {
      const Arc = "–ï—â–µ –ø–æ—Ö–æ–¥–∏—Ç";
      const MoneyPayFest = await Car.findOneAndUpdate(
        {
          ChatId: chatId,
          UserId: userId,
        },
        { $inc: { Money: -50 }, Health: Arc }
      );
      setTimeout(async () => {
        const Arc = "–ù—É–∂–Ω–∞ –ø–æ–∫—Ä–∞—Å–∫–∞";
        const ArcPaint = await Car.findOneAndUpdate(
          { ChatId: chatId, UserId: userId },
          {
            Health: Arc,
          }
        );
        msg.send(`–û –Ω–µ—Ç! –£ –Ω–µ–∫—Ä—É—Ö–∏ ${ArcPaint.Name} –æ–ø—è—Ç—å –∑–∞—Ü–≤–µ–ª–∞ –∞—Ä–∫–∞! :(`);
      }, 5 * 60 * 1000);

      msg.send(
        "–ì–æ—Ç–æ–≤–æ! –ê—Ä–∫–∞ –∫–∞–∫ –Ω–æ–≤–∞—è! –ù–æ –≥–∞—Ä–∞–Ω—Ç–∏—è –¥–æ –≤–æ—Ä–æ—Ç, —Ç–∞–∫ —á—Ç–æ –ø–æ—Ç–æ—Ä–æ–ø–∏—Å—å!"
      );
    }
  }
});
bot.hear(/–û—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è –Ω–∞ —Ñ–µ—Å—Ç$/, async (msg) => {
  const userId = msg.senderId;
  const chatId = msg.peerId;
  const Check = await Car.findOne({ ChatId: chatId, UserId: userId });
  const CheckT = await Time.findOne({ ChatId: chatId, UserId: userId });
  let CheckArc = Check.Health;
  let CheckTime = CheckT.FestTime;
  console.log(CheckArc, CheckTime);
  let TimeNoww = new Date();
  if (CheckArc === "–ù—É–∂–Ω–∞ –ø–æ–∫—Ä–∞—Å–∫–∞" && CheckT.FestTime.getTime() < TimeNoww) {
    msg.send("–ö—É–¥–∞ —Ç—ã —Å–æ–±—Ä–∞–ª—Å—è —Å —Ä–∂–∞–≤–æ–π –∞—Ä–∫–æ–π? –ü–æ–¥–∫—Ä–∞—Å—å –Ω–µ–∫—Ä—É—Ö—É!");
  } else if (Check.Fuel < 10) {
    msg.send("–£ —Ç–µ–±—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–ø–ª–∏–≤–∞ –Ω–∞ –¥–æ—Ä–æ–≥—É!");
  } else if (
    CheckArc === "–ï—â–µ –ø–æ—Ö–æ–¥–∏—Ç" &&
    CheckT.FestTime.getTime() < TimeNoww
  ) {
    const TimeLast = await Time.findOne({ ChatId: chatId, UserId: userId });

    const TimeNow = new Date() * 1;
    console.log("last: ", TimeLast.FestTime.getTime());
    console.log("now:", TimeNow);
    const Status = TimeLast.StatusArc;

    const TimeThen = TimeNow + 1500000;
    const idTime = await Time.findOneAndUpdate(
      { ChatId: chatId, UserId: userId },
      { FestTime: TimeThen, StatusArc: true },
      { upsert: true, new: true }
    );
    console.log(TimeThen);
    const FestPhoto = "photo-218124566_457239032";
    msg.send({
      message: `–ö—Ä—É—Ç–æ–π –≤—ã—à–µ–ª —Ñ–µ—Å—Ç! ${Check.Name} - –Ω–∞—Å—Ç–æ—è—â–∞—è –∫–∞–ø—Å—É–ª–∞ –≤—Ä–µ–º–µ–Ω–∏!\n +10üèÅ –æ–ø—ã—Ç–∞!`,
      attachment: FestPhoto,
    });
    const FuelInc = 10;

    const ExpInc = 10;
    const lll = Check.Level;

    const CarLevel = await Car.findOneAndUpdate(
      { ChatId: chatId, UserId: userId },
      { $inc: { Fuel: -FuelInc, Exp: ExpInc } },
      { upsert: false, new: true }
    );
    const nextLevelExperience = (CarLevel.Level + 5) * 2;
    if (CarLevel.Exp >= nextLevelExperience) {
      const LevelUp = lll + 1;
      const Inc = CarLevel.Exp - nextLevelExperience;

      const sCar = await Car.findOneAndUpdate(
        { ChatId: chatId, UserId: userId },
        { Level: LevelUp, Exp: Inc },
        { upsert: false, new: true }
      );
      msg.send(`–≠–π, –Ω–µ–∫—Ä—É—Ö–∞ ${sCar.Name} –ø–æ–ª—É—á–∞–µ—Ç –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å!`);
    }
  } else if (CheckT.FestTime.getTime() > TimeNoww) {
    msg.send("–í–∞—à–∞ –Ω–µ–∫—Ä—É—Ö–∞ —Å–µ–≥–æ–¥–Ω—è —É–∂–µ –±—ã–ª–∞ –Ω–∞ —Ñ–µ—Å—Ç–µ!");
  }
});

bot.hear(/^–†–æ–º–∞ –≥–µ–π$/i, async (msg) => {
  const userId = msg.senderId;
  const chatId = msg.peerId;

  let Sum = 100;
  const SecretCommand = await Car.findOneAndUpdate(
    { ChatId: chatId, UserId: userId },
    { $inc: { Money: Sum } }
  );
  msg.send(`${SecretCommand.Name} + $100`);
});
bot.hear(/^–í–∞—Å–∏–ª–∏–π —Ç–æ–ø$/i, async (msg) => {
  const userId = msg.senderId;
  const chatId = msg.peerId;

  let Sum = 100;
  const SecretCommand = await Car.findOneAndUpdate(
    { ChatId: chatId, UserId: userId },
    { $inc: { Money: Sum } }
  );
  msg.send(`${SecretCommand.Name} + $100`);
});

bot.hear(/^–£–π—Ç–∏ —Å–æ —Å–≤–µ—Ç–æ—Ñ–æ—Ä–∞$/i, async (msg) => {
  const userId = msg.senderId;
  const chatId = msg.peerId;

  const Check = await Car.findOne({ ChatId: chatId, UserId: userId });
  const CheckT = await Info.findOne({ ChatId: chatId, UserId: userId });
  let CheckCondition = Check.Condition;
  let CheckTime = CheckT.TimeToUnderground;
  console.log(CheckCondition, CheckTime);
  let TimeNoww = new Date();
  if (
    CheckCondition === "–ù—É–∂–µ–Ω —Ä–µ–º–æ–Ω—Ç" &&
    CheckT.TimeToUnderground.getTime() < TimeNoww
  ) {
    msg.send("–í–∞—à–∞ –Ω–µ–∫—Ä—É—Ö–∞ –Ω–µ –Ω–∞ —Ö–æ–¥—É!");
  } else if (Check.Fuel < 5) {
    msg.send("–£ –í–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ‚õΩ!");
  } else if (
    CheckCondition === "–ù–∞ —Ö–æ–¥—É" &&
    CheckT.TimeToUnderground.getTime() < TimeNoww
  ) {
    const TimeLast = await Time.findOne({ ChatId: chatId, UserId: userId });

    const TimeNow = new Date() * 1;
    console.log("last: ", TimeLast.FestTime.getTime());
    console.log("now:", TimeNow);

    const TimeThen = TimeNow + 7200000;
    const idTime = await Time.findOneAndUpdate(
      { ChatId: chatId, UserId: userId },
      { TimeToUnderground: TimeThen },
      { upsert: false, new: true }
    );
    const Fuel = 5;
    const idCar = await Car.findOneAndUpdate(
      { ChatId: chatId, UserId: userId },
      { $inc: { Fuel: -Fuel } },
      { upsert: false, new: true }
    );
    console.log(TimeThen);
    const keyboard = Keyboard.builder()

      .row()
      .textButton({
        label: "–ú–æ—è –Ω–µ–∫—Ä—É—Ö–∞",
        payload: { command: "–ú–æ—è –Ω–µ–∫—Ä—É—Ö–∞" },
        color: Keyboard.SECONDARY_COLOR,
      })

      .oneTime();
    const RacePhoto = "photo-218124566_457239034"; // –§–û–¢–û –£–•–û–î–ê –°–û –°–í–ï–¢–û–§–û–†–ê(–ª—É—á—à–µ —Ä–∞–Ω–¥–æ–º–Ω–æ 1 –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö)
    msg.send({
      message: `–ö–æ–≥–¥–∞ –∑–∞–∂–∏–≥–∞–µ—Ç—Å—è –∑–µ–ª–µ–Ω—ã–π —Å–≤–µ—Ç, –≤—Å–µ –∑–∞–±—ã–≤–∞–µ—Ç—Å—è, –∫—Ä–æ–º–µ —Ä–µ–≤–∞ –º–æ—Ç–æ—Ä–∞ –∏ –∑–∞–ø–∞—Ö–∞ –∂–∂–µ–Ω–æ–π —Ä–µ–∑–∏–Ω—ã...\n–í—ã —É—à–ª–∏ —Å–æ —Å–≤–µ—Ç–æ—Ñ–æ—Ä–∞. \n-5‚õΩ \n +3üèÅ`,
      keyboard: keyboard,
      attachment: RacePhoto,
    });

    const ExpInc = 3;
    const lll = Check.Level;

    const CarLevel = await Car.findOneAndUpdate(
      { ChatId: chatId, UserId: userId },
      { $inc: { Exp: ExpInc } },
      { upsert: false, new: true }
    );
    const nextLevelExperience = (CarLevel.Level + 5) * 2;
    if (CarLevel.Exp >= nextLevelExperience) {
      const LevelUp = lll + 1;
      const Inc = CarLevel.Exp - nextLevelExperience;

      const sCar = await Car.findOneAndUpdate(
        { ChatId: chatId, UserId: userId },
        { Level: LevelUp, Exp: Inc },
        { upsert: false, new: true }
      );
      msg.send(`–ù–µ–∫—Ä—É—Ö–∞ ${sCar.Name} –ø–æ–ª—É—á–∞–µ—Ç –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å!`);
    }
  } else if (CheckT.TimeToUnderground.getTime() > TimeNoww) {
    msg.send(
      "–í–∞—à–∞ –Ω–µ–∫—Ä—É—Ö–∞ –ø–µ—Ä–µ–≥—Ä–µ–ª–∞—Å—å –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–º –∑–∞–µ–∑–¥–µ —Å–æ —Å–≤–µ—Ç–æ—Ñ–æ—Ä–∞! –ï–π –Ω—É–∂–Ω–æ –æ—Å—Ç—ã—Ç—å, –ø–µ—Ä–µ—Ä—ã–≤ 2 —á–∞—Å–∞!"
    );
  }
});

bot.hear(/^–ù–µ–∫—Ä—É—Ö–∞ –¥–Ω—è$/i, async (msg) => {
  // const userId = msg.senderId;
  const chatId = msg.peerId;

  const DailyDate = await NecroDaily.findOne({
    ChatId: chatId,
  });

  if (!DailyDate) {
    // –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –±–¥ –∏ –≤—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const randomCar = await Car.find({ ChatId: chatId });
    console.log("randomCar: ", randomCar);

    let result = Math.floor(Math.random() * randomCar.length);
    let CarOfTheDay = randomCar[result];

    console.log("CarOfTheDay: ", CarOfTheDay);
    console.log("result: ", result);
    const userId = CarOfTheDay.UserId;
    console.log("userId: ", userId);

    const DailyDate = await NecroDaily.create({
      Daily: new Date(),
      Date: new Date(),
      Friday: new Date(),
      ChatId: chatId,

      UserId: userId, //—Å–ª—É—á–∞–π–Ω–æ –≤—ã–±—Ä–∞–Ω–Ω–∞—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è - –∑–∞–ø–∏—Å—ã–≤–∞–µ–º
    });

    const BonusDaily = await Car.findOneAndUpdate(
      { ChatId: chatId, UserId: userId },
      {
        $inc: { Money: 50, Fuel: 10, Exp: 5 },
      }, // –Ω–∞—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å
      { upsert: false, new: true }
    );

    msg.send(`–°–µ–≥–æ–¥–Ω—è —Å–∞–º–∞—è –∫—Ä—É—Ç–∞—è –Ω–µ–∫—Ä—É—Ö–∞ - ${BonusDaily.Name}! \n–û–Ω–∞ –ø–æ–ª—É—á–∞–µ—Ç: \n+ 50$ \n+ 10–ª \n+5 Exp
    `); // –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    const CarLevel = await Car.findOne({ ChatId: chatId, UserId: userId });
    const nextLevelExperience = (CarLevel.Level + 5) * 2;
    if (CarLevel.Exp >= nextLevelExperience) {
      const lll = CarLevel.Level;
      const LevelUp = lll + 1;
      const Inc = CarLevel.Exp - nextLevelExperience;

      const sCar = await Car.findOneAndUpdate(
        { ChatId: chatId, UserId: userId },
        { Level: LevelUp, Exp: Inc },
        { upsert: false, new: true }
      );
      msg.send(`–ù–µ–∫—Ä—É—Ö–∞ ${sCar.Name} –ø–æ–ª—É—á–∞–µ—Ç –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å!`);
    }
  } else {
    const randomCar = await Car.find({ ChatId: chatId });
    console.log("randomCar: ", randomCar);

    let result = Math.floor(Math.random() * randomCar.length);
    let CarOfTheDay = randomCar[result];

    console.log("CarOfTheDay: ", CarOfTheDay);
    console.log("result: ", result);
    const userId = CarOfTheDay.UserId;
    console.log("userId: ", userId);

    // const result = await Info.find({
    //   ChatId: chatId,
    //   StatusRace: true,
    // });

    // // setTimeout(async () => {
    // //–∑–¥–µ—Å—å –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –∏–∑ –º–∞—Å—Å–∏–≤–∞ result, —á—Ç–æ–±—ã –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
    // let RaceWinner = Math.floor(Math.random() * result.length);

    // let Winner = result[RaceWinner];
    // console.log("RESULT" + Winner);
    // const WinnerName = Winner.UserId;

    const Daily = await NecroDaily.findOneAndUpdate(
      {
        ChatId: chatId,
      },
      {
        UserId: userId, //—Å–ª—É—á–∞–π–Ω–æ –≤—ã–±—Ä–∞–Ω–Ω–∞—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è - –∑–∞–ø–∏—Å—ã–≤–∞–µ–º
      }
    );

    const BonusDaily = await Car.findOneAndUpdate(
      { ChatId: chatId, UserId: userId },
      {
        $inc: { Money: 50, Fuel: 10, Exp: 5 }, // –Ω–∞—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å
      },
      { upsert: false, new: true }
    );

    msg.send(`–°–µ–≥–æ–¥–Ω—è —Å–∞–º–∞—è –∫—Ä—É—Ç–∞—è –Ω–µ–∫—Ä—É—Ö–∞ - ${BonusDaily.Name}! \n–û–Ω–∞ –ø–æ–ª—É—á–∞–µ—Ç: \n+ 50$ \n+ 10–ª \n+5 Exp
`);
    const CarLevel = await Car.findOne({ ChatId: chatId, UserId: userId });
    const nextLevelExperience = (CarLevel.Level + 5) * 2;
    if (CarLevel.Exp >= nextLevelExperience) {
      const lll = CarLevel.Level;
      const LevelUp = lll + 1;
      const Inc = CarLevel.Exp - nextLevelExperience;

      const sCar = await Car.findOneAndUpdate(
        { ChatId: chatId, UserId: userId },
        { Level: LevelUp, Exp: Inc },
        { upsert: false, new: true }
      );
      msg.send(`–ù–µ–∫—Ä—É—Ö–∞ ${sCar.Name} –ø–æ–ª—É—á–∞–µ—Ç –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å!`);
    }
  }
});

bot.hear(/^–ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –∑–∞–ø—á–∞—Å—Ç–∏$/i, async (msg) => {
  const userId = msg.senderId;
  const chatId = msg.peerId;
  const CarDB = await Car.findOne({ ChatId: chatId, UserId: userId });

  if (CarDB.Money < 50) {
    msg.send("–£ –í–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–µ–Ω–µ–≥!");
  } else {
    // –°–Ω–∏–º–∞–µ–º –¥–µ–Ω—å–≥–∏ –∏ –Ω–∞—á–∏—Å–ª—è–µ–º +1 –∑–∞–ø—á–∞—Å—Ç—å –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
    const PartsPrice = 50;
    const Number = 1;
    const PayForParts = await Car.findOneAndUpdate(
      {
        ChatId: chatId,
        UserId: userId,
      },
      {
        $inc: { Money: -PartsPrice },
      }
    );
    const PartsInc = await Info.findOneAndUpdate(
      {
        ChatId: chatId,
        UserId: userId,
      },
      {
        $inc: { ZapParts: Number },
      }
    );

    msg.send(`–í—ã –ø—Ä–∏–æ–±—Ä–µ–ª–∏ 1 –∑–∞–ø—á–∞—Å—Ç—å!`);
  }
});

bot.hear(/^–ü—Ä–æ–¥–∞—Ç—å –∑–∞–ø—á–∞—Å—Ç–∏$/i, async (msg) => {
  const userId = msg.senderId;
  const chatId = msg.peerId;
  const InfoDB = await Info.findOne({ ChatId: chatId, UserId: userId });

  if (InfoDB.ZapParts < 1) {
    msg.send("–£ –í–∞—Å –Ω–µ—Ç –∑–∞–ø—á–∞—Å—Ç–µ–π –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ!");
  } else {
    // –ü—Ä–æ–¥–∞–µ–º 1 –∑–∞–ø—á–∞—Å—Ç—å –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
    const PartsPrice = 25;
    const Number = 1;
    const MoneyForSellParts = await Car.findOneAndUpdate(
      {
        ChatId: chatId,
        UserId: userId,
      },
      {
        $inc: { Money: PartsPrice },
      }
    );
    const PartsDec = await Info.findOneAndUpdate(
      {
        ChatId: chatId,
        UserId: userId,
      },
      {
        $inc: { ZapParts: -Number },
      }
    );

    msg.send(`–í—ã –ø—Ä–æ–¥–∞–ª–∏ 1 –∑–∞–ø—á–∞—Å—Ç—å –∑–∞ 25$!`);
  }
});

bot.hear(/^–ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –∫—Ä–∞—Å–∫—É$/i, async (msg) => {
  const userId = msg.senderId;
  const chatId = msg.peerId;
  const CarDB = await Car.findOne({ ChatId: chatId, UserId: userId });

  if (CarDB.Money < 50) {
    msg.send("–£ –í–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–µ–Ω–µ–≥!");
  } else {
    // –°–Ω–∏–º–∞–µ–º –¥–µ–Ω—å–≥–∏ –∏ –Ω–∞—á–∏—Å–ª—è–µ–º +1 –∫—Ä–∞—Å–∫—É –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
    const PaintPrice = 50;
    const Number = 1;
    const PayForParts = await Car.findOneAndUpdate(
      {
        ChatId: chatId,
        UserId: userId,
      },
      {
        $inc: { Money: -PaintPrice },
      }
    );
    const PartsInc = await Info.findOneAndUpdate(
      {
        ChatId: chatId,
        UserId: userId,
      },
      {
        $inc: { PaintBallon: Number },
      }
    );

    msg.send(`–í—ã –ø—Ä–∏–æ–±—Ä–µ–ª–∏ 1 –±–∞–ª–ª–æ–Ω—á–∏–∫ –∫—Ä–∞—Å–∫–∏!`);
  }
});

bot.hear(/^–ü—Ä–æ–¥–∞—Ç—å –∫—Ä–∞—Å–∫—É$/i, async (msg) => {
  const userId = msg.senderId;
  const chatId = msg.peerId;
  const InfoDB = await Info.findOne({ ChatId: chatId, UserId: userId });

  if (InfoDB.PaintBallon < 1) {
    msg.send("–£ –í–∞—Å –Ω–µ—Ç –±–∞–ª–ª–æ–Ω—á–∏–∫–æ–≤ –∫—Ä–∞—Å–∫–∏ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ!");
  } else {
    // –ü—Ä–æ–¥–∞–µ–º 1 –∑–∞–ø—á–∞—Å—Ç—å –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
    const PaintSellPrice = 25;
    const Number = 1;
    const MoneyForSellParts = await Car.findOneAndUpdate(
      {
        ChatId: chatId,
        UserId: userId,
      },
      {
        $inc: { Money: PaintSellPrice },
      }
    );
    const PaintDec = await Info.findOneAndUpdate(
      {
        ChatId: chatId,
        UserId: userId,
      },
      {
        $inc: { PaintBallon: -Number },
      }
    );

    msg.send(`–í—ã –ø—Ä–æ–¥–∞–ª–∏ 1 –±–∞–ª–ª–æ–Ω—á–∏–∫ –∫—Ä–∞—Å–∫–∏ –∑–∞ 25$!`);
  }
});

bot.hear(/–û—Ç—Ä–µ–º–æ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–µ–∫—Ä—É—Ö—É$/, async (msg) => {
  const userId = msg.senderId;
  const chatId = msg.peerId;
  const CarDB = await Car.findOne({ ChatId: chatId, UserId: userId });
  const InfoDB = await Info.findOne({ ChatId: chatId, UserId: userId });

  if (CarDB.Condition === "–ù–∞ —Ö–æ–¥—É") {
    msg.send("–†–µ–º–æ–Ω—Ç –Ω–µ –Ω—É–∂–µ–Ω, –í–∞—à–∞ –Ω–µ–∫—Ä—É—Ö–∞ –µ—â–µ –ø–æ—Ö–æ–¥–∏—Ç!");
    console.log("Money.Condition: ", Money.Condition);
  } else if (InfoDB.ZapParts < 1) {
    msg.send("–£ –í–∞—Å –Ω–µ—Ç –∑–∞–ø—á–∞—Å—Ç–µ–π –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ!");
  } else {
    // –°–Ω–∏–º–∞–µ–º 1 –∑–∞–ø—á–∞—Å—Ç—å –∏ —Ä–µ–º–æ–Ω—Ç–∏—Ä—É–µ–º –Ω–µ–∫—Ä—É—Ö—É
    const RepairParts = 1;
    const Number = 100;
    const PayToRace = await Car.findOneAndUpdate(
      {
        ChatId: chatId,
        UserId: userId,
      },
      {
        // $inc: { Money: -RepairPrice },
        ConditionNumber: Number,
        Condition: "–ù–∞ —Ö–æ–¥—É",
      }
    );
    const PartsDec = await Info.findOneAndUpdate(
      {
        ChatId: chatId,
        UserId: userId,
      },
      {
        $inc: { ZapParts: -RepairParts },
      }
    );

    msg.send(`–ù–µ–∫—Ä—É—Ö–∞ ${CarDB.Name} —Å–Ω–æ–≤–∞ –Ω–∞ —Ö–æ–¥—É!`);
  }
});

bot.hear(/^–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫—Ä–∞—Å–∫—É$/i, async (msg) => {
  const userId = msg.senderId;
  const chatId = msg.peerId;
  const CarDB = await Car.findOne({ ChatId: chatId, UserId: userId });
  const InfoDB = await Info.findOne({ ChatId: chatId, UserId: userId });

  if (CarDB.Health === "–ï—â–µ –ø–æ—Ö–æ–¥–∏—Ç") {
    msg.send("–í–∞—à–∏ –ø–æ—Ä–æ–≥–∏ –≤ —Ö–æ—Ä–æ—à–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏!");
    // console.log("Money.Condition: ", Money.Condition);
  } else if (InfoDB.PaintBallon < 1) {
    msg.send("–£ –í–∞—Å –Ω–µ—Ç –∫—Ä–∞—Å–∫–∏ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ!");
  } else {
    // –°–Ω–∏–º–∞–µ–º 1 –±–∞–ª–ª–æ–Ω—á–∏–∫ –∫—Ä–∞—Å–∫–∏ –∏ –∫—Ä–∞—Å–∏–º –ø–æ—Ä–æ–≥–∏
    const RepairPaint = 1;
    const GoodCondition = "–ï—â–µ –ø–æ—Ö–æ–¥–∏—Ç";
    const PayToRace = await Car.findOneAndUpdate(
      {
        ChatId: chatId,
        UserId: userId,
      },
      {
        Health: GoodCondition,
      }
    );
    const PaintDec = await Info.findOneAndUpdate(
      {
        ChatId: chatId,
        UserId: userId,
      },
      {
        $inc: { PaintBallon: -RepairPaint },
      }
    );
    const Paint = await Time.findOneAndUpdate(
      {
        ChatId: chatId,
        UserId: userId,
      },
      {
        StatusArc: true,
      }
    );

    msg.send(`–í—ã –ø–æ–∫—Ä–∞—Å–∏–ª–∏ –ø–æ—Ä–æ–≥–∏!`);
  }
});

console.log("bot start!");
vk.updates.start().catch(console.error);
